
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model AIDocument
 * 
 */
export type AIDocument = $Result.DefaultSelection<Prisma.$AIDocumentPayload>
/**
 * Model DocumentData
 * 
 */
export type DocumentData = $Result.DefaultSelection<Prisma.$DocumentDataPayload>
/**
 * Model AIDocumentChat
 * 
 */
export type AIDocumentChat = $Result.DefaultSelection<Prisma.$AIDocumentChatPayload>
/**
 * Model QuestionCategory
 * 
 */
export type QuestionCategory = $Result.DefaultSelection<Prisma.$QuestionCategoryPayload>
/**
 * Model QuestionAnswer
 * 
 */
export type QuestionAnswer = $Result.DefaultSelection<Prisma.$QuestionAnswerPayload>
/**
 * Model Prompt
 * 
 */
export type Prompt = $Result.DefaultSelection<Prisma.$PromptPayload>
/**
 * Model PromptLogs
 * 
 */
export type PromptLogs = $Result.DefaultSelection<Prisma.$PromptLogsPayload>
/**
 * Model AIModelAssistant
 * 
 */
export type AIModelAssistant = $Result.DefaultSelection<Prisma.$AIModelAssistantPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.aIDocument`: Exposes CRUD operations for the **AIDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIDocuments
    * const aIDocuments = await prisma.aIDocument.findMany()
    * ```
    */
  get aIDocument(): Prisma.AIDocumentDelegate<ExtArgs>;

  /**
   * `prisma.documentData`: Exposes CRUD operations for the **DocumentData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentData
    * const documentData = await prisma.documentData.findMany()
    * ```
    */
  get documentData(): Prisma.DocumentDataDelegate<ExtArgs>;

  /**
   * `prisma.aIDocumentChat`: Exposes CRUD operations for the **AIDocumentChat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIDocumentChats
    * const aIDocumentChats = await prisma.aIDocumentChat.findMany()
    * ```
    */
  get aIDocumentChat(): Prisma.AIDocumentChatDelegate<ExtArgs>;

  /**
   * `prisma.questionCategory`: Exposes CRUD operations for the **QuestionCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionCategories
    * const questionCategories = await prisma.questionCategory.findMany()
    * ```
    */
  get questionCategory(): Prisma.QuestionCategoryDelegate<ExtArgs>;

  /**
   * `prisma.questionAnswer`: Exposes CRUD operations for the **QuestionAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionAnswers
    * const questionAnswers = await prisma.questionAnswer.findMany()
    * ```
    */
  get questionAnswer(): Prisma.QuestionAnswerDelegate<ExtArgs>;

  /**
   * `prisma.prompt`: Exposes CRUD operations for the **Prompt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prompts
    * const prompts = await prisma.prompt.findMany()
    * ```
    */
  get prompt(): Prisma.PromptDelegate<ExtArgs>;

  /**
   * `prisma.promptLogs`: Exposes CRUD operations for the **PromptLogs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromptLogs
    * const promptLogs = await prisma.promptLogs.findMany()
    * ```
    */
  get promptLogs(): Prisma.PromptLogsDelegate<ExtArgs>;

  /**
   * `prisma.aIModelAssistant`: Exposes CRUD operations for the **AIModelAssistant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIModelAssistants
    * const aIModelAssistants = await prisma.aIModelAssistant.findMany()
    * ```
    */
  get aIModelAssistant(): Prisma.AIModelAssistantDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    AIDocument: 'AIDocument',
    DocumentData: 'DocumentData',
    AIDocumentChat: 'AIDocumentChat',
    QuestionCategory: 'QuestionCategory',
    QuestionAnswer: 'QuestionAnswer',
    Prompt: 'Prompt',
    PromptLogs: 'PromptLogs',
    AIModelAssistant: 'AIModelAssistant'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "aIDocument" | "documentData" | "aIDocumentChat" | "questionCategory" | "questionAnswer" | "prompt" | "promptLogs" | "aIModelAssistant"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      AIDocument: {
        payload: Prisma.$AIDocumentPayload<ExtArgs>
        fields: Prisma.AIDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload>
          }
          findFirst: {
            args: Prisma.AIDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload>
          }
          findMany: {
            args: Prisma.AIDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload>[]
          }
          create: {
            args: Prisma.AIDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload>
          }
          createMany: {
            args: Prisma.AIDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload>[]
          }
          delete: {
            args: Prisma.AIDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload>
          }
          update: {
            args: Prisma.AIDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload>
          }
          deleteMany: {
            args: Prisma.AIDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AIDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentPayload>
          }
          aggregate: {
            args: Prisma.AIDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIDocument>
          }
          groupBy: {
            args: Prisma.AIDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<AIDocumentCountAggregateOutputType> | number
          }
        }
      }
      DocumentData: {
        payload: Prisma.$DocumentDataPayload<ExtArgs>
        fields: Prisma.DocumentDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload>
          }
          findFirst: {
            args: Prisma.DocumentDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload>
          }
          findMany: {
            args: Prisma.DocumentDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload>[]
          }
          create: {
            args: Prisma.DocumentDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload>
          }
          createMany: {
            args: Prisma.DocumentDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload>[]
          }
          delete: {
            args: Prisma.DocumentDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload>
          }
          update: {
            args: Prisma.DocumentDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentDataPayload>
          }
          aggregate: {
            args: Prisma.DocumentDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentData>
          }
          groupBy: {
            args: Prisma.DocumentDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentDataCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentDataCountAggregateOutputType> | number
          }
        }
      }
      AIDocumentChat: {
        payload: Prisma.$AIDocumentChatPayload<ExtArgs>
        fields: Prisma.AIDocumentChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIDocumentChatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIDocumentChatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload>
          }
          findFirst: {
            args: Prisma.AIDocumentChatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIDocumentChatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload>
          }
          findMany: {
            args: Prisma.AIDocumentChatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload>[]
          }
          create: {
            args: Prisma.AIDocumentChatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload>
          }
          createMany: {
            args: Prisma.AIDocumentChatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIDocumentChatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload>[]
          }
          delete: {
            args: Prisma.AIDocumentChatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload>
          }
          update: {
            args: Prisma.AIDocumentChatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload>
          }
          deleteMany: {
            args: Prisma.AIDocumentChatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIDocumentChatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AIDocumentChatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIDocumentChatPayload>
          }
          aggregate: {
            args: Prisma.AIDocumentChatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIDocumentChat>
          }
          groupBy: {
            args: Prisma.AIDocumentChatGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIDocumentChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIDocumentChatCountArgs<ExtArgs>
            result: $Utils.Optional<AIDocumentChatCountAggregateOutputType> | number
          }
        }
      }
      QuestionCategory: {
        payload: Prisma.$QuestionCategoryPayload<ExtArgs>
        fields: Prisma.QuestionCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload>
          }
          findFirst: {
            args: Prisma.QuestionCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload>
          }
          findMany: {
            args: Prisma.QuestionCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload>[]
          }
          create: {
            args: Prisma.QuestionCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload>
          }
          createMany: {
            args: Prisma.QuestionCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload>[]
          }
          delete: {
            args: Prisma.QuestionCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload>
          }
          update: {
            args: Prisma.QuestionCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload>
          }
          deleteMany: {
            args: Prisma.QuestionCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionCategoryPayload>
          }
          aggregate: {
            args: Prisma.QuestionCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionCategory>
          }
          groupBy: {
            args: Prisma.QuestionCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCategoryCountAggregateOutputType> | number
          }
        }
      }
      QuestionAnswer: {
        payload: Prisma.$QuestionAnswerPayload<ExtArgs>
        fields: Prisma.QuestionAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          findFirst: {
            args: Prisma.QuestionAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          findMany: {
            args: Prisma.QuestionAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>[]
          }
          create: {
            args: Prisma.QuestionAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          createMany: {
            args: Prisma.QuestionAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionAnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>[]
          }
          delete: {
            args: Prisma.QuestionAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          update: {
            args: Prisma.QuestionAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          deleteMany: {
            args: Prisma.QuestionAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAnswerPayload>
          }
          aggregate: {
            args: Prisma.QuestionAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionAnswer>
          }
          groupBy: {
            args: Prisma.QuestionAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionAnswerCountAggregateOutputType> | number
          }
        }
      }
      Prompt: {
        payload: Prisma.$PromptPayload<ExtArgs>
        fields: Prisma.PromptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          findFirst: {
            args: Prisma.PromptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          findMany: {
            args: Prisma.PromptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>[]
          }
          create: {
            args: Prisma.PromptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          createMany: {
            args: Prisma.PromptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>[]
          }
          delete: {
            args: Prisma.PromptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          update: {
            args: Prisma.PromptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          deleteMany: {
            args: Prisma.PromptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PromptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          aggregate: {
            args: Prisma.PromptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrompt>
          }
          groupBy: {
            args: Prisma.PromptGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromptGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromptCountArgs<ExtArgs>
            result: $Utils.Optional<PromptCountAggregateOutputType> | number
          }
        }
      }
      PromptLogs: {
        payload: Prisma.$PromptLogsPayload<ExtArgs>
        fields: Prisma.PromptLogsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromptLogsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromptLogsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload>
          }
          findFirst: {
            args: Prisma.PromptLogsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromptLogsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload>
          }
          findMany: {
            args: Prisma.PromptLogsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload>[]
          }
          create: {
            args: Prisma.PromptLogsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload>
          }
          createMany: {
            args: Prisma.PromptLogsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromptLogsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload>[]
          }
          delete: {
            args: Prisma.PromptLogsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload>
          }
          update: {
            args: Prisma.PromptLogsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload>
          }
          deleteMany: {
            args: Prisma.PromptLogsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromptLogsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PromptLogsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptLogsPayload>
          }
          aggregate: {
            args: Prisma.PromptLogsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromptLogs>
          }
          groupBy: {
            args: Prisma.PromptLogsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromptLogsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromptLogsCountArgs<ExtArgs>
            result: $Utils.Optional<PromptLogsCountAggregateOutputType> | number
          }
        }
      }
      AIModelAssistant: {
        payload: Prisma.$AIModelAssistantPayload<ExtArgs>
        fields: Prisma.AIModelAssistantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIModelAssistantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIModelAssistantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload>
          }
          findFirst: {
            args: Prisma.AIModelAssistantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIModelAssistantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload>
          }
          findMany: {
            args: Prisma.AIModelAssistantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload>[]
          }
          create: {
            args: Prisma.AIModelAssistantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload>
          }
          createMany: {
            args: Prisma.AIModelAssistantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIModelAssistantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload>[]
          }
          delete: {
            args: Prisma.AIModelAssistantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload>
          }
          update: {
            args: Prisma.AIModelAssistantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload>
          }
          deleteMany: {
            args: Prisma.AIModelAssistantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIModelAssistantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AIModelAssistantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIModelAssistantPayload>
          }
          aggregate: {
            args: Prisma.AIModelAssistantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIModelAssistant>
          }
          groupBy: {
            args: Prisma.AIModelAssistantGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIModelAssistantGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIModelAssistantCountArgs<ExtArgs>
            result: $Utils.Optional<AIModelAssistantCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    documents: number
    answers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
    answers?: boolean | UserCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIDocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAnswerWhereInput
  }


  /**
   * Count Type AIDocumentCountOutputType
   */

  export type AIDocumentCountOutputType = {
    documentData: number
    documentChat: number
  }

  export type AIDocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentData?: boolean | AIDocumentCountOutputTypeCountDocumentDataArgs
    documentChat?: boolean | AIDocumentCountOutputTypeCountDocumentChatArgs
  }

  // Custom InputTypes
  /**
   * AIDocumentCountOutputType without action
   */
  export type AIDocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentCountOutputType
     */
    select?: AIDocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AIDocumentCountOutputType without action
   */
  export type AIDocumentCountOutputTypeCountDocumentDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentDataWhereInput
  }

  /**
   * AIDocumentCountOutputType without action
   */
  export type AIDocumentCountOutputTypeCountDocumentChatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIDocumentChatWhereInput
  }


  /**
   * Count Type QuestionCategoryCountOutputType
   */

  export type QuestionCategoryCountOutputType = {
    answers: number
  }

  export type QuestionCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | QuestionCategoryCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * QuestionCategoryCountOutputType without action
   */
  export type QuestionCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategoryCountOutputType
     */
    select?: QuestionCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCategoryCountOutputType without action
   */
  export type QuestionCategoryCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAnswerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documents?: boolean | User$documentsArgs<ExtArgs>
    answers?: boolean | User$answersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | User$documentsArgs<ExtArgs>
    answers?: boolean | User$answersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      documents: Prisma.$AIDocumentPayload<ExtArgs>[]
      answers: Prisma.$QuestionAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    answers<T extends User$answersArgs<ExtArgs> = {}>(args?: Subset<T, User$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    where?: AIDocumentWhereInput
    orderBy?: AIDocumentOrderByWithRelationInput | AIDocumentOrderByWithRelationInput[]
    cursor?: AIDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AIDocumentScalarFieldEnum | AIDocumentScalarFieldEnum[]
  }

  /**
   * User.answers
   */
  export type User$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    where?: QuestionAnswerWhereInput
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    cursor?: QuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model AIDocument
   */

  export type AggregateAIDocument = {
    _count: AIDocumentCountAggregateOutputType | null
    _avg: AIDocumentAvgAggregateOutputType | null
    _sum: AIDocumentSumAggregateOutputType | null
    _min: AIDocumentMinAggregateOutputType | null
    _max: AIDocumentMaxAggregateOutputType | null
  }

  export type AIDocumentAvgAggregateOutputType = {
    id: number | null
    qualityScore: number | null
    wordCount: number | null
    userId: number | null
  }

  export type AIDocumentSumAggregateOutputType = {
    id: number | null
    qualityScore: number | null
    wordCount: number | null
    userId: number | null
  }

  export type AIDocumentMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    framework: string | null
    industry: string | null
    documentType: string | null
    qualityScore: number | null
    wordCount: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AIDocumentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    framework: string | null
    industry: string | null
    documentType: string | null
    qualityScore: number | null
    wordCount: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AIDocumentCountAggregateOutputType = {
    id: number
    title: number
    content: number
    framework: number
    industry: number
    documentType: number
    qualityScore: number
    wordCount: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AIDocumentAvgAggregateInputType = {
    id?: true
    qualityScore?: true
    wordCount?: true
    userId?: true
  }

  export type AIDocumentSumAggregateInputType = {
    id?: true
    qualityScore?: true
    wordCount?: true
    userId?: true
  }

  export type AIDocumentMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    framework?: true
    industry?: true
    documentType?: true
    qualityScore?: true
    wordCount?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AIDocumentMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    framework?: true
    industry?: true
    documentType?: true
    qualityScore?: true
    wordCount?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AIDocumentCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    framework?: true
    industry?: true
    documentType?: true
    qualityScore?: true
    wordCount?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AIDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIDocument to aggregate.
     */
    where?: AIDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIDocuments to fetch.
     */
    orderBy?: AIDocumentOrderByWithRelationInput | AIDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIDocuments
    **/
    _count?: true | AIDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIDocumentMaxAggregateInputType
  }

  export type GetAIDocumentAggregateType<T extends AIDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateAIDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIDocument[P]>
      : GetScalarType<T[P], AggregateAIDocument[P]>
  }




  export type AIDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIDocumentWhereInput
    orderBy?: AIDocumentOrderByWithAggregationInput | AIDocumentOrderByWithAggregationInput[]
    by: AIDocumentScalarFieldEnum[] | AIDocumentScalarFieldEnum
    having?: AIDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIDocumentCountAggregateInputType | true
    _avg?: AIDocumentAvgAggregateInputType
    _sum?: AIDocumentSumAggregateInputType
    _min?: AIDocumentMinAggregateInputType
    _max?: AIDocumentMaxAggregateInputType
  }

  export type AIDocumentGroupByOutputType = {
    id: number
    title: string
    content: string
    framework: string
    industry: string | null
    documentType: string
    qualityScore: number | null
    wordCount: number | null
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: AIDocumentCountAggregateOutputType | null
    _avg: AIDocumentAvgAggregateOutputType | null
    _sum: AIDocumentSumAggregateOutputType | null
    _min: AIDocumentMinAggregateOutputType | null
    _max: AIDocumentMaxAggregateOutputType | null
  }

  type GetAIDocumentGroupByPayload<T extends AIDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], AIDocumentGroupByOutputType[P]>
        }
      >
    >


  export type AIDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    framework?: boolean
    industry?: boolean
    documentType?: boolean
    qualityScore?: boolean
    wordCount?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    documentData?: boolean | AIDocument$documentDataArgs<ExtArgs>
    documentChat?: boolean | AIDocument$documentChatArgs<ExtArgs>
    _count?: boolean | AIDocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIDocument"]>

  export type AIDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    framework?: boolean
    industry?: boolean
    documentType?: boolean
    qualityScore?: boolean
    wordCount?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIDocument"]>

  export type AIDocumentSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    framework?: boolean
    industry?: boolean
    documentType?: boolean
    qualityScore?: boolean
    wordCount?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AIDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    documentData?: boolean | AIDocument$documentDataArgs<ExtArgs>
    documentChat?: boolean | AIDocument$documentChatArgs<ExtArgs>
    _count?: boolean | AIDocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AIDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AIDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIDocument"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      documentData: Prisma.$DocumentDataPayload<ExtArgs>[]
      documentChat: Prisma.$AIDocumentChatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: string
      framework: string
      industry: string | null
      documentType: string
      qualityScore: number | null
      wordCount: number | null
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["aIDocument"]>
    composites: {}
  }

  type AIDocumentGetPayload<S extends boolean | null | undefined | AIDocumentDefaultArgs> = $Result.GetResult<Prisma.$AIDocumentPayload, S>

  type AIDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AIDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AIDocumentCountAggregateInputType | true
    }

  export interface AIDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIDocument'], meta: { name: 'AIDocument' } }
    /**
     * Find zero or one AIDocument that matches the filter.
     * @param {AIDocumentFindUniqueArgs} args - Arguments to find a AIDocument
     * @example
     * // Get one AIDocument
     * const aIDocument = await prisma.aIDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIDocumentFindUniqueArgs>(args: SelectSubset<T, AIDocumentFindUniqueArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AIDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AIDocumentFindUniqueOrThrowArgs} args - Arguments to find a AIDocument
     * @example
     * // Get one AIDocument
     * const aIDocument = await prisma.aIDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, AIDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AIDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentFindFirstArgs} args - Arguments to find a AIDocument
     * @example
     * // Get one AIDocument
     * const aIDocument = await prisma.aIDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIDocumentFindFirstArgs>(args?: SelectSubset<T, AIDocumentFindFirstArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AIDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentFindFirstOrThrowArgs} args - Arguments to find a AIDocument
     * @example
     * // Get one AIDocument
     * const aIDocument = await prisma.aIDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, AIDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AIDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIDocuments
     * const aIDocuments = await prisma.aIDocument.findMany()
     * 
     * // Get first 10 AIDocuments
     * const aIDocuments = await prisma.aIDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIDocumentWithIdOnly = await prisma.aIDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIDocumentFindManyArgs>(args?: SelectSubset<T, AIDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AIDocument.
     * @param {AIDocumentCreateArgs} args - Arguments to create a AIDocument.
     * @example
     * // Create one AIDocument
     * const AIDocument = await prisma.aIDocument.create({
     *   data: {
     *     // ... data to create a AIDocument
     *   }
     * })
     * 
     */
    create<T extends AIDocumentCreateArgs>(args: SelectSubset<T, AIDocumentCreateArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AIDocuments.
     * @param {AIDocumentCreateManyArgs} args - Arguments to create many AIDocuments.
     * @example
     * // Create many AIDocuments
     * const aIDocument = await prisma.aIDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIDocumentCreateManyArgs>(args?: SelectSubset<T, AIDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIDocuments and returns the data saved in the database.
     * @param {AIDocumentCreateManyAndReturnArgs} args - Arguments to create many AIDocuments.
     * @example
     * // Create many AIDocuments
     * const aIDocument = await prisma.aIDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIDocuments and only return the `id`
     * const aIDocumentWithIdOnly = await prisma.aIDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, AIDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AIDocument.
     * @param {AIDocumentDeleteArgs} args - Arguments to delete one AIDocument.
     * @example
     * // Delete one AIDocument
     * const AIDocument = await prisma.aIDocument.delete({
     *   where: {
     *     // ... filter to delete one AIDocument
     *   }
     * })
     * 
     */
    delete<T extends AIDocumentDeleteArgs>(args: SelectSubset<T, AIDocumentDeleteArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AIDocument.
     * @param {AIDocumentUpdateArgs} args - Arguments to update one AIDocument.
     * @example
     * // Update one AIDocument
     * const aIDocument = await prisma.aIDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIDocumentUpdateArgs>(args: SelectSubset<T, AIDocumentUpdateArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AIDocuments.
     * @param {AIDocumentDeleteManyArgs} args - Arguments to filter AIDocuments to delete.
     * @example
     * // Delete a few AIDocuments
     * const { count } = await prisma.aIDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIDocumentDeleteManyArgs>(args?: SelectSubset<T, AIDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIDocuments
     * const aIDocument = await prisma.aIDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIDocumentUpdateManyArgs>(args: SelectSubset<T, AIDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AIDocument.
     * @param {AIDocumentUpsertArgs} args - Arguments to update or create a AIDocument.
     * @example
     * // Update or create a AIDocument
     * const aIDocument = await prisma.aIDocument.upsert({
     *   create: {
     *     // ... data to create a AIDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIDocument we want to update
     *   }
     * })
     */
    upsert<T extends AIDocumentUpsertArgs>(args: SelectSubset<T, AIDocumentUpsertArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AIDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentCountArgs} args - Arguments to filter AIDocuments to count.
     * @example
     * // Count the number of AIDocuments
     * const count = await prisma.aIDocument.count({
     *   where: {
     *     // ... the filter for the AIDocuments we want to count
     *   }
     * })
    **/
    count<T extends AIDocumentCountArgs>(
      args?: Subset<T, AIDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIDocumentAggregateArgs>(args: Subset<T, AIDocumentAggregateArgs>): Prisma.PrismaPromise<GetAIDocumentAggregateType<T>>

    /**
     * Group by AIDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIDocumentGroupByArgs['orderBy'] }
        : { orderBy?: AIDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIDocument model
   */
  readonly fields: AIDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documentData<T extends AIDocument$documentDataArgs<ExtArgs> = {}>(args?: Subset<T, AIDocument$documentDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "findMany"> | Null>
    documentChat<T extends AIDocument$documentChatArgs<ExtArgs> = {}>(args?: Subset<T, AIDocument$documentChatArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIDocument model
   */ 
  interface AIDocumentFieldRefs {
    readonly id: FieldRef<"AIDocument", 'Int'>
    readonly title: FieldRef<"AIDocument", 'String'>
    readonly content: FieldRef<"AIDocument", 'String'>
    readonly framework: FieldRef<"AIDocument", 'String'>
    readonly industry: FieldRef<"AIDocument", 'String'>
    readonly documentType: FieldRef<"AIDocument", 'String'>
    readonly qualityScore: FieldRef<"AIDocument", 'Int'>
    readonly wordCount: FieldRef<"AIDocument", 'Int'>
    readonly userId: FieldRef<"AIDocument", 'Int'>
    readonly createdAt: FieldRef<"AIDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"AIDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIDocument findUnique
   */
  export type AIDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * Filter, which AIDocument to fetch.
     */
    where: AIDocumentWhereUniqueInput
  }

  /**
   * AIDocument findUniqueOrThrow
   */
  export type AIDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * Filter, which AIDocument to fetch.
     */
    where: AIDocumentWhereUniqueInput
  }

  /**
   * AIDocument findFirst
   */
  export type AIDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * Filter, which AIDocument to fetch.
     */
    where?: AIDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIDocuments to fetch.
     */
    orderBy?: AIDocumentOrderByWithRelationInput | AIDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIDocuments.
     */
    cursor?: AIDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIDocuments.
     */
    distinct?: AIDocumentScalarFieldEnum | AIDocumentScalarFieldEnum[]
  }

  /**
   * AIDocument findFirstOrThrow
   */
  export type AIDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * Filter, which AIDocument to fetch.
     */
    where?: AIDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIDocuments to fetch.
     */
    orderBy?: AIDocumentOrderByWithRelationInput | AIDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIDocuments.
     */
    cursor?: AIDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIDocuments.
     */
    distinct?: AIDocumentScalarFieldEnum | AIDocumentScalarFieldEnum[]
  }

  /**
   * AIDocument findMany
   */
  export type AIDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * Filter, which AIDocuments to fetch.
     */
    where?: AIDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIDocuments to fetch.
     */
    orderBy?: AIDocumentOrderByWithRelationInput | AIDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIDocuments.
     */
    cursor?: AIDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIDocuments.
     */
    skip?: number
    distinct?: AIDocumentScalarFieldEnum | AIDocumentScalarFieldEnum[]
  }

  /**
   * AIDocument create
   */
  export type AIDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a AIDocument.
     */
    data: XOR<AIDocumentCreateInput, AIDocumentUncheckedCreateInput>
  }

  /**
   * AIDocument createMany
   */
  export type AIDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIDocuments.
     */
    data: AIDocumentCreateManyInput | AIDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIDocument createManyAndReturn
   */
  export type AIDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AIDocuments.
     */
    data: AIDocumentCreateManyInput | AIDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AIDocument update
   */
  export type AIDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a AIDocument.
     */
    data: XOR<AIDocumentUpdateInput, AIDocumentUncheckedUpdateInput>
    /**
     * Choose, which AIDocument to update.
     */
    where: AIDocumentWhereUniqueInput
  }

  /**
   * AIDocument updateMany
   */
  export type AIDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIDocuments.
     */
    data: XOR<AIDocumentUpdateManyMutationInput, AIDocumentUncheckedUpdateManyInput>
    /**
     * Filter which AIDocuments to update
     */
    where?: AIDocumentWhereInput
  }

  /**
   * AIDocument upsert
   */
  export type AIDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the AIDocument to update in case it exists.
     */
    where: AIDocumentWhereUniqueInput
    /**
     * In case the AIDocument found by the `where` argument doesn't exist, create a new AIDocument with this data.
     */
    create: XOR<AIDocumentCreateInput, AIDocumentUncheckedCreateInput>
    /**
     * In case the AIDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIDocumentUpdateInput, AIDocumentUncheckedUpdateInput>
  }

  /**
   * AIDocument delete
   */
  export type AIDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
    /**
     * Filter which AIDocument to delete.
     */
    where: AIDocumentWhereUniqueInput
  }

  /**
   * AIDocument deleteMany
   */
  export type AIDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIDocuments to delete
     */
    where?: AIDocumentWhereInput
  }

  /**
   * AIDocument.documentData
   */
  export type AIDocument$documentDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    where?: DocumentDataWhereInput
    orderBy?: DocumentDataOrderByWithRelationInput | DocumentDataOrderByWithRelationInput[]
    cursor?: DocumentDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentDataScalarFieldEnum | DocumentDataScalarFieldEnum[]
  }

  /**
   * AIDocument.documentChat
   */
  export type AIDocument$documentChatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    where?: AIDocumentChatWhereInput
    orderBy?: AIDocumentChatOrderByWithRelationInput | AIDocumentChatOrderByWithRelationInput[]
    cursor?: AIDocumentChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AIDocumentChatScalarFieldEnum | AIDocumentChatScalarFieldEnum[]
  }

  /**
   * AIDocument without action
   */
  export type AIDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocument
     */
    select?: AIDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentInclude<ExtArgs> | null
  }


  /**
   * Model DocumentData
   */

  export type AggregateDocumentData = {
    _count: DocumentDataCountAggregateOutputType | null
    _avg: DocumentDataAvgAggregateOutputType | null
    _sum: DocumentDataSumAggregateOutputType | null
    _min: DocumentDataMinAggregateOutputType | null
    _max: DocumentDataMaxAggregateOutputType | null
  }

  export type DocumentDataAvgAggregateOutputType = {
    id: number | null
    documentId: number | null
    listId: number | null
  }

  export type DocumentDataSumAggregateOutputType = {
    id: number | null
    documentId: number | null
    listId: number | null
  }

  export type DocumentDataMinAggregateOutputType = {
    id: number | null
    documentId: number | null
    listId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type DocumentDataMaxAggregateOutputType = {
    id: number | null
    documentId: number | null
    listId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type DocumentDataCountAggregateOutputType = {
    id: number
    documentId: number
    listId: number
    content: number
    createdAt: number
    _all: number
  }


  export type DocumentDataAvgAggregateInputType = {
    id?: true
    documentId?: true
    listId?: true
  }

  export type DocumentDataSumAggregateInputType = {
    id?: true
    documentId?: true
    listId?: true
  }

  export type DocumentDataMinAggregateInputType = {
    id?: true
    documentId?: true
    listId?: true
    content?: true
    createdAt?: true
  }

  export type DocumentDataMaxAggregateInputType = {
    id?: true
    documentId?: true
    listId?: true
    content?: true
    createdAt?: true
  }

  export type DocumentDataCountAggregateInputType = {
    id?: true
    documentId?: true
    listId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type DocumentDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentData to aggregate.
     */
    where?: DocumentDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentData to fetch.
     */
    orderBy?: DocumentDataOrderByWithRelationInput | DocumentDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentData
    **/
    _count?: true | DocumentDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentDataMaxAggregateInputType
  }

  export type GetDocumentDataAggregateType<T extends DocumentDataAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentData[P]>
      : GetScalarType<T[P], AggregateDocumentData[P]>
  }




  export type DocumentDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentDataWhereInput
    orderBy?: DocumentDataOrderByWithAggregationInput | DocumentDataOrderByWithAggregationInput[]
    by: DocumentDataScalarFieldEnum[] | DocumentDataScalarFieldEnum
    having?: DocumentDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentDataCountAggregateInputType | true
    _avg?: DocumentDataAvgAggregateInputType
    _sum?: DocumentDataSumAggregateInputType
    _min?: DocumentDataMinAggregateInputType
    _max?: DocumentDataMaxAggregateInputType
  }

  export type DocumentDataGroupByOutputType = {
    id: number
    documentId: number
    listId: number | null
    content: string
    createdAt: Date
    _count: DocumentDataCountAggregateOutputType | null
    _avg: DocumentDataAvgAggregateOutputType | null
    _sum: DocumentDataSumAggregateOutputType | null
    _min: DocumentDataMinAggregateOutputType | null
    _max: DocumentDataMaxAggregateOutputType | null
  }

  type GetDocumentDataGroupByPayload<T extends DocumentDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentDataGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentDataGroupByOutputType[P]>
        }
      >
    >


  export type DocumentDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    listId?: boolean
    content?: boolean
    createdAt?: boolean
    document?: boolean | AIDocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentData"]>

  export type DocumentDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    listId?: boolean
    content?: boolean
    createdAt?: boolean
    document?: boolean | AIDocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentData"]>

  export type DocumentDataSelectScalar = {
    id?: boolean
    documentId?: boolean
    listId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type DocumentDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | AIDocumentDefaultArgs<ExtArgs>
  }
  export type DocumentDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | AIDocumentDefaultArgs<ExtArgs>
  }

  export type $DocumentDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentData"
    objects: {
      document: Prisma.$AIDocumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentId: number
      listId: number | null
      content: string
      createdAt: Date
    }, ExtArgs["result"]["documentData"]>
    composites: {}
  }

  type DocumentDataGetPayload<S extends boolean | null | undefined | DocumentDataDefaultArgs> = $Result.GetResult<Prisma.$DocumentDataPayload, S>

  type DocumentDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentDataCountAggregateInputType | true
    }

  export interface DocumentDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentData'], meta: { name: 'DocumentData' } }
    /**
     * Find zero or one DocumentData that matches the filter.
     * @param {DocumentDataFindUniqueArgs} args - Arguments to find a DocumentData
     * @example
     * // Get one DocumentData
     * const documentData = await prisma.documentData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentDataFindUniqueArgs>(args: SelectSubset<T, DocumentDataFindUniqueArgs<ExtArgs>>): Prisma__DocumentDataClient<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DocumentData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentDataFindUniqueOrThrowArgs} args - Arguments to find a DocumentData
     * @example
     * // Get one DocumentData
     * const documentData = await prisma.documentData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentDataFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentDataClient<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DocumentData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentDataFindFirstArgs} args - Arguments to find a DocumentData
     * @example
     * // Get one DocumentData
     * const documentData = await prisma.documentData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentDataFindFirstArgs>(args?: SelectSubset<T, DocumentDataFindFirstArgs<ExtArgs>>): Prisma__DocumentDataClient<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DocumentData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentDataFindFirstOrThrowArgs} args - Arguments to find a DocumentData
     * @example
     * // Get one DocumentData
     * const documentData = await prisma.documentData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentDataFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentDataClient<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DocumentData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentData
     * const documentData = await prisma.documentData.findMany()
     * 
     * // Get first 10 DocumentData
     * const documentData = await prisma.documentData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentDataWithIdOnly = await prisma.documentData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentDataFindManyArgs>(args?: SelectSubset<T, DocumentDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DocumentData.
     * @param {DocumentDataCreateArgs} args - Arguments to create a DocumentData.
     * @example
     * // Create one DocumentData
     * const DocumentData = await prisma.documentData.create({
     *   data: {
     *     // ... data to create a DocumentData
     *   }
     * })
     * 
     */
    create<T extends DocumentDataCreateArgs>(args: SelectSubset<T, DocumentDataCreateArgs<ExtArgs>>): Prisma__DocumentDataClient<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DocumentData.
     * @param {DocumentDataCreateManyArgs} args - Arguments to create many DocumentData.
     * @example
     * // Create many DocumentData
     * const documentData = await prisma.documentData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentDataCreateManyArgs>(args?: SelectSubset<T, DocumentDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentData and returns the data saved in the database.
     * @param {DocumentDataCreateManyAndReturnArgs} args - Arguments to create many DocumentData.
     * @example
     * // Create many DocumentData
     * const documentData = await prisma.documentData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentData and only return the `id`
     * const documentDataWithIdOnly = await prisma.documentData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentDataCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DocumentData.
     * @param {DocumentDataDeleteArgs} args - Arguments to delete one DocumentData.
     * @example
     * // Delete one DocumentData
     * const DocumentData = await prisma.documentData.delete({
     *   where: {
     *     // ... filter to delete one DocumentData
     *   }
     * })
     * 
     */
    delete<T extends DocumentDataDeleteArgs>(args: SelectSubset<T, DocumentDataDeleteArgs<ExtArgs>>): Prisma__DocumentDataClient<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DocumentData.
     * @param {DocumentDataUpdateArgs} args - Arguments to update one DocumentData.
     * @example
     * // Update one DocumentData
     * const documentData = await prisma.documentData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentDataUpdateArgs>(args: SelectSubset<T, DocumentDataUpdateArgs<ExtArgs>>): Prisma__DocumentDataClient<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DocumentData.
     * @param {DocumentDataDeleteManyArgs} args - Arguments to filter DocumentData to delete.
     * @example
     * // Delete a few DocumentData
     * const { count } = await prisma.documentData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDataDeleteManyArgs>(args?: SelectSubset<T, DocumentDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentData
     * const documentData = await prisma.documentData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentDataUpdateManyArgs>(args: SelectSubset<T, DocumentDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DocumentData.
     * @param {DocumentDataUpsertArgs} args - Arguments to update or create a DocumentData.
     * @example
     * // Update or create a DocumentData
     * const documentData = await prisma.documentData.upsert({
     *   create: {
     *     // ... data to create a DocumentData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentData we want to update
     *   }
     * })
     */
    upsert<T extends DocumentDataUpsertArgs>(args: SelectSubset<T, DocumentDataUpsertArgs<ExtArgs>>): Prisma__DocumentDataClient<$Result.GetResult<Prisma.$DocumentDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DocumentData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentDataCountArgs} args - Arguments to filter DocumentData to count.
     * @example
     * // Count the number of DocumentData
     * const count = await prisma.documentData.count({
     *   where: {
     *     // ... the filter for the DocumentData we want to count
     *   }
     * })
    **/
    count<T extends DocumentDataCountArgs>(
      args?: Subset<T, DocumentDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentDataAggregateArgs>(args: Subset<T, DocumentDataAggregateArgs>): Prisma.PrismaPromise<GetDocumentDataAggregateType<T>>

    /**
     * Group by DocumentData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentDataGroupByArgs['orderBy'] }
        : { orderBy?: DocumentDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentData model
   */
  readonly fields: DocumentDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends AIDocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AIDocumentDefaultArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentData model
   */ 
  interface DocumentDataFieldRefs {
    readonly id: FieldRef<"DocumentData", 'Int'>
    readonly documentId: FieldRef<"DocumentData", 'Int'>
    readonly listId: FieldRef<"DocumentData", 'Int'>
    readonly content: FieldRef<"DocumentData", 'String'>
    readonly createdAt: FieldRef<"DocumentData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DocumentData findUnique
   */
  export type DocumentDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * Filter, which DocumentData to fetch.
     */
    where: DocumentDataWhereUniqueInput
  }

  /**
   * DocumentData findUniqueOrThrow
   */
  export type DocumentDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * Filter, which DocumentData to fetch.
     */
    where: DocumentDataWhereUniqueInput
  }

  /**
   * DocumentData findFirst
   */
  export type DocumentDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * Filter, which DocumentData to fetch.
     */
    where?: DocumentDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentData to fetch.
     */
    orderBy?: DocumentDataOrderByWithRelationInput | DocumentDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentData.
     */
    cursor?: DocumentDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentData.
     */
    distinct?: DocumentDataScalarFieldEnum | DocumentDataScalarFieldEnum[]
  }

  /**
   * DocumentData findFirstOrThrow
   */
  export type DocumentDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * Filter, which DocumentData to fetch.
     */
    where?: DocumentDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentData to fetch.
     */
    orderBy?: DocumentDataOrderByWithRelationInput | DocumentDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentData.
     */
    cursor?: DocumentDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentData.
     */
    distinct?: DocumentDataScalarFieldEnum | DocumentDataScalarFieldEnum[]
  }

  /**
   * DocumentData findMany
   */
  export type DocumentDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * Filter, which DocumentData to fetch.
     */
    where?: DocumentDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentData to fetch.
     */
    orderBy?: DocumentDataOrderByWithRelationInput | DocumentDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentData.
     */
    cursor?: DocumentDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentData.
     */
    skip?: number
    distinct?: DocumentDataScalarFieldEnum | DocumentDataScalarFieldEnum[]
  }

  /**
   * DocumentData create
   */
  export type DocumentDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentData.
     */
    data: XOR<DocumentDataCreateInput, DocumentDataUncheckedCreateInput>
  }

  /**
   * DocumentData createMany
   */
  export type DocumentDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentData.
     */
    data: DocumentDataCreateManyInput | DocumentDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentData createManyAndReturn
   */
  export type DocumentDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DocumentData.
     */
    data: DocumentDataCreateManyInput | DocumentDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentData update
   */
  export type DocumentDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentData.
     */
    data: XOR<DocumentDataUpdateInput, DocumentDataUncheckedUpdateInput>
    /**
     * Choose, which DocumentData to update.
     */
    where: DocumentDataWhereUniqueInput
  }

  /**
   * DocumentData updateMany
   */
  export type DocumentDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentData.
     */
    data: XOR<DocumentDataUpdateManyMutationInput, DocumentDataUncheckedUpdateManyInput>
    /**
     * Filter which DocumentData to update
     */
    where?: DocumentDataWhereInput
  }

  /**
   * DocumentData upsert
   */
  export type DocumentDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentData to update in case it exists.
     */
    where: DocumentDataWhereUniqueInput
    /**
     * In case the DocumentData found by the `where` argument doesn't exist, create a new DocumentData with this data.
     */
    create: XOR<DocumentDataCreateInput, DocumentDataUncheckedCreateInput>
    /**
     * In case the DocumentData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentDataUpdateInput, DocumentDataUncheckedUpdateInput>
  }

  /**
   * DocumentData delete
   */
  export type DocumentDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
    /**
     * Filter which DocumentData to delete.
     */
    where: DocumentDataWhereUniqueInput
  }

  /**
   * DocumentData deleteMany
   */
  export type DocumentDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentData to delete
     */
    where?: DocumentDataWhereInput
  }

  /**
   * DocumentData without action
   */
  export type DocumentDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentData
     */
    select?: DocumentDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentDataInclude<ExtArgs> | null
  }


  /**
   * Model AIDocumentChat
   */

  export type AggregateAIDocumentChat = {
    _count: AIDocumentChatCountAggregateOutputType | null
    _avg: AIDocumentChatAvgAggregateOutputType | null
    _sum: AIDocumentChatSumAggregateOutputType | null
    _min: AIDocumentChatMinAggregateOutputType | null
    _max: AIDocumentChatMaxAggregateOutputType | null
  }

  export type AIDocumentChatAvgAggregateOutputType = {
    id: number | null
    documentId: number | null
  }

  export type AIDocumentChatSumAggregateOutputType = {
    id: number | null
    documentId: number | null
  }

  export type AIDocumentChatMinAggregateOutputType = {
    id: number | null
    documentId: number | null
    message: string | null
    role: string | null
    createdAt: Date | null
  }

  export type AIDocumentChatMaxAggregateOutputType = {
    id: number | null
    documentId: number | null
    message: string | null
    role: string | null
    createdAt: Date | null
  }

  export type AIDocumentChatCountAggregateOutputType = {
    id: number
    documentId: number
    message: number
    role: number
    createdAt: number
    _all: number
  }


  export type AIDocumentChatAvgAggregateInputType = {
    id?: true
    documentId?: true
  }

  export type AIDocumentChatSumAggregateInputType = {
    id?: true
    documentId?: true
  }

  export type AIDocumentChatMinAggregateInputType = {
    id?: true
    documentId?: true
    message?: true
    role?: true
    createdAt?: true
  }

  export type AIDocumentChatMaxAggregateInputType = {
    id?: true
    documentId?: true
    message?: true
    role?: true
    createdAt?: true
  }

  export type AIDocumentChatCountAggregateInputType = {
    id?: true
    documentId?: true
    message?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type AIDocumentChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIDocumentChat to aggregate.
     */
    where?: AIDocumentChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIDocumentChats to fetch.
     */
    orderBy?: AIDocumentChatOrderByWithRelationInput | AIDocumentChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIDocumentChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIDocumentChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIDocumentChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIDocumentChats
    **/
    _count?: true | AIDocumentChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIDocumentChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIDocumentChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIDocumentChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIDocumentChatMaxAggregateInputType
  }

  export type GetAIDocumentChatAggregateType<T extends AIDocumentChatAggregateArgs> = {
        [P in keyof T & keyof AggregateAIDocumentChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIDocumentChat[P]>
      : GetScalarType<T[P], AggregateAIDocumentChat[P]>
  }




  export type AIDocumentChatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIDocumentChatWhereInput
    orderBy?: AIDocumentChatOrderByWithAggregationInput | AIDocumentChatOrderByWithAggregationInput[]
    by: AIDocumentChatScalarFieldEnum[] | AIDocumentChatScalarFieldEnum
    having?: AIDocumentChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIDocumentChatCountAggregateInputType | true
    _avg?: AIDocumentChatAvgAggregateInputType
    _sum?: AIDocumentChatSumAggregateInputType
    _min?: AIDocumentChatMinAggregateInputType
    _max?: AIDocumentChatMaxAggregateInputType
  }

  export type AIDocumentChatGroupByOutputType = {
    id: number
    documentId: number
    message: string
    role: string
    createdAt: Date
    _count: AIDocumentChatCountAggregateOutputType | null
    _avg: AIDocumentChatAvgAggregateOutputType | null
    _sum: AIDocumentChatSumAggregateOutputType | null
    _min: AIDocumentChatMinAggregateOutputType | null
    _max: AIDocumentChatMaxAggregateOutputType | null
  }

  type GetAIDocumentChatGroupByPayload<T extends AIDocumentChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIDocumentChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIDocumentChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIDocumentChatGroupByOutputType[P]>
            : GetScalarType<T[P], AIDocumentChatGroupByOutputType[P]>
        }
      >
    >


  export type AIDocumentChatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    message?: boolean
    role?: boolean
    createdAt?: boolean
    document?: boolean | AIDocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIDocumentChat"]>

  export type AIDocumentChatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    message?: boolean
    role?: boolean
    createdAt?: boolean
    document?: boolean | AIDocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIDocumentChat"]>

  export type AIDocumentChatSelectScalar = {
    id?: boolean
    documentId?: boolean
    message?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type AIDocumentChatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | AIDocumentDefaultArgs<ExtArgs>
  }
  export type AIDocumentChatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | AIDocumentDefaultArgs<ExtArgs>
  }

  export type $AIDocumentChatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIDocumentChat"
    objects: {
      document: Prisma.$AIDocumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentId: number
      message: string
      role: string
      createdAt: Date
    }, ExtArgs["result"]["aIDocumentChat"]>
    composites: {}
  }

  type AIDocumentChatGetPayload<S extends boolean | null | undefined | AIDocumentChatDefaultArgs> = $Result.GetResult<Prisma.$AIDocumentChatPayload, S>

  type AIDocumentChatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AIDocumentChatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AIDocumentChatCountAggregateInputType | true
    }

  export interface AIDocumentChatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIDocumentChat'], meta: { name: 'AIDocumentChat' } }
    /**
     * Find zero or one AIDocumentChat that matches the filter.
     * @param {AIDocumentChatFindUniqueArgs} args - Arguments to find a AIDocumentChat
     * @example
     * // Get one AIDocumentChat
     * const aIDocumentChat = await prisma.aIDocumentChat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIDocumentChatFindUniqueArgs>(args: SelectSubset<T, AIDocumentChatFindUniqueArgs<ExtArgs>>): Prisma__AIDocumentChatClient<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AIDocumentChat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AIDocumentChatFindUniqueOrThrowArgs} args - Arguments to find a AIDocumentChat
     * @example
     * // Get one AIDocumentChat
     * const aIDocumentChat = await prisma.aIDocumentChat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIDocumentChatFindUniqueOrThrowArgs>(args: SelectSubset<T, AIDocumentChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIDocumentChatClient<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AIDocumentChat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentChatFindFirstArgs} args - Arguments to find a AIDocumentChat
     * @example
     * // Get one AIDocumentChat
     * const aIDocumentChat = await prisma.aIDocumentChat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIDocumentChatFindFirstArgs>(args?: SelectSubset<T, AIDocumentChatFindFirstArgs<ExtArgs>>): Prisma__AIDocumentChatClient<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AIDocumentChat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentChatFindFirstOrThrowArgs} args - Arguments to find a AIDocumentChat
     * @example
     * // Get one AIDocumentChat
     * const aIDocumentChat = await prisma.aIDocumentChat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIDocumentChatFindFirstOrThrowArgs>(args?: SelectSubset<T, AIDocumentChatFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIDocumentChatClient<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AIDocumentChats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentChatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIDocumentChats
     * const aIDocumentChats = await prisma.aIDocumentChat.findMany()
     * 
     * // Get first 10 AIDocumentChats
     * const aIDocumentChats = await prisma.aIDocumentChat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIDocumentChatWithIdOnly = await prisma.aIDocumentChat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIDocumentChatFindManyArgs>(args?: SelectSubset<T, AIDocumentChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AIDocumentChat.
     * @param {AIDocumentChatCreateArgs} args - Arguments to create a AIDocumentChat.
     * @example
     * // Create one AIDocumentChat
     * const AIDocumentChat = await prisma.aIDocumentChat.create({
     *   data: {
     *     // ... data to create a AIDocumentChat
     *   }
     * })
     * 
     */
    create<T extends AIDocumentChatCreateArgs>(args: SelectSubset<T, AIDocumentChatCreateArgs<ExtArgs>>): Prisma__AIDocumentChatClient<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AIDocumentChats.
     * @param {AIDocumentChatCreateManyArgs} args - Arguments to create many AIDocumentChats.
     * @example
     * // Create many AIDocumentChats
     * const aIDocumentChat = await prisma.aIDocumentChat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIDocumentChatCreateManyArgs>(args?: SelectSubset<T, AIDocumentChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIDocumentChats and returns the data saved in the database.
     * @param {AIDocumentChatCreateManyAndReturnArgs} args - Arguments to create many AIDocumentChats.
     * @example
     * // Create many AIDocumentChats
     * const aIDocumentChat = await prisma.aIDocumentChat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIDocumentChats and only return the `id`
     * const aIDocumentChatWithIdOnly = await prisma.aIDocumentChat.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIDocumentChatCreateManyAndReturnArgs>(args?: SelectSubset<T, AIDocumentChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AIDocumentChat.
     * @param {AIDocumentChatDeleteArgs} args - Arguments to delete one AIDocumentChat.
     * @example
     * // Delete one AIDocumentChat
     * const AIDocumentChat = await prisma.aIDocumentChat.delete({
     *   where: {
     *     // ... filter to delete one AIDocumentChat
     *   }
     * })
     * 
     */
    delete<T extends AIDocumentChatDeleteArgs>(args: SelectSubset<T, AIDocumentChatDeleteArgs<ExtArgs>>): Prisma__AIDocumentChatClient<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AIDocumentChat.
     * @param {AIDocumentChatUpdateArgs} args - Arguments to update one AIDocumentChat.
     * @example
     * // Update one AIDocumentChat
     * const aIDocumentChat = await prisma.aIDocumentChat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIDocumentChatUpdateArgs>(args: SelectSubset<T, AIDocumentChatUpdateArgs<ExtArgs>>): Prisma__AIDocumentChatClient<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AIDocumentChats.
     * @param {AIDocumentChatDeleteManyArgs} args - Arguments to filter AIDocumentChats to delete.
     * @example
     * // Delete a few AIDocumentChats
     * const { count } = await prisma.aIDocumentChat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIDocumentChatDeleteManyArgs>(args?: SelectSubset<T, AIDocumentChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIDocumentChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIDocumentChats
     * const aIDocumentChat = await prisma.aIDocumentChat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIDocumentChatUpdateManyArgs>(args: SelectSubset<T, AIDocumentChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AIDocumentChat.
     * @param {AIDocumentChatUpsertArgs} args - Arguments to update or create a AIDocumentChat.
     * @example
     * // Update or create a AIDocumentChat
     * const aIDocumentChat = await prisma.aIDocumentChat.upsert({
     *   create: {
     *     // ... data to create a AIDocumentChat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIDocumentChat we want to update
     *   }
     * })
     */
    upsert<T extends AIDocumentChatUpsertArgs>(args: SelectSubset<T, AIDocumentChatUpsertArgs<ExtArgs>>): Prisma__AIDocumentChatClient<$Result.GetResult<Prisma.$AIDocumentChatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AIDocumentChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentChatCountArgs} args - Arguments to filter AIDocumentChats to count.
     * @example
     * // Count the number of AIDocumentChats
     * const count = await prisma.aIDocumentChat.count({
     *   where: {
     *     // ... the filter for the AIDocumentChats we want to count
     *   }
     * })
    **/
    count<T extends AIDocumentChatCountArgs>(
      args?: Subset<T, AIDocumentChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIDocumentChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIDocumentChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIDocumentChatAggregateArgs>(args: Subset<T, AIDocumentChatAggregateArgs>): Prisma.PrismaPromise<GetAIDocumentChatAggregateType<T>>

    /**
     * Group by AIDocumentChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIDocumentChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIDocumentChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIDocumentChatGroupByArgs['orderBy'] }
        : { orderBy?: AIDocumentChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIDocumentChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIDocumentChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIDocumentChat model
   */
  readonly fields: AIDocumentChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIDocumentChat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIDocumentChatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends AIDocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AIDocumentDefaultArgs<ExtArgs>>): Prisma__AIDocumentClient<$Result.GetResult<Prisma.$AIDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIDocumentChat model
   */ 
  interface AIDocumentChatFieldRefs {
    readonly id: FieldRef<"AIDocumentChat", 'Int'>
    readonly documentId: FieldRef<"AIDocumentChat", 'Int'>
    readonly message: FieldRef<"AIDocumentChat", 'String'>
    readonly role: FieldRef<"AIDocumentChat", 'String'>
    readonly createdAt: FieldRef<"AIDocumentChat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIDocumentChat findUnique
   */
  export type AIDocumentChatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * Filter, which AIDocumentChat to fetch.
     */
    where: AIDocumentChatWhereUniqueInput
  }

  /**
   * AIDocumentChat findUniqueOrThrow
   */
  export type AIDocumentChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * Filter, which AIDocumentChat to fetch.
     */
    where: AIDocumentChatWhereUniqueInput
  }

  /**
   * AIDocumentChat findFirst
   */
  export type AIDocumentChatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * Filter, which AIDocumentChat to fetch.
     */
    where?: AIDocumentChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIDocumentChats to fetch.
     */
    orderBy?: AIDocumentChatOrderByWithRelationInput | AIDocumentChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIDocumentChats.
     */
    cursor?: AIDocumentChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIDocumentChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIDocumentChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIDocumentChats.
     */
    distinct?: AIDocumentChatScalarFieldEnum | AIDocumentChatScalarFieldEnum[]
  }

  /**
   * AIDocumentChat findFirstOrThrow
   */
  export type AIDocumentChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * Filter, which AIDocumentChat to fetch.
     */
    where?: AIDocumentChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIDocumentChats to fetch.
     */
    orderBy?: AIDocumentChatOrderByWithRelationInput | AIDocumentChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIDocumentChats.
     */
    cursor?: AIDocumentChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIDocumentChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIDocumentChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIDocumentChats.
     */
    distinct?: AIDocumentChatScalarFieldEnum | AIDocumentChatScalarFieldEnum[]
  }

  /**
   * AIDocumentChat findMany
   */
  export type AIDocumentChatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * Filter, which AIDocumentChats to fetch.
     */
    where?: AIDocumentChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIDocumentChats to fetch.
     */
    orderBy?: AIDocumentChatOrderByWithRelationInput | AIDocumentChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIDocumentChats.
     */
    cursor?: AIDocumentChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIDocumentChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIDocumentChats.
     */
    skip?: number
    distinct?: AIDocumentChatScalarFieldEnum | AIDocumentChatScalarFieldEnum[]
  }

  /**
   * AIDocumentChat create
   */
  export type AIDocumentChatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * The data needed to create a AIDocumentChat.
     */
    data: XOR<AIDocumentChatCreateInput, AIDocumentChatUncheckedCreateInput>
  }

  /**
   * AIDocumentChat createMany
   */
  export type AIDocumentChatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIDocumentChats.
     */
    data: AIDocumentChatCreateManyInput | AIDocumentChatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIDocumentChat createManyAndReturn
   */
  export type AIDocumentChatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AIDocumentChats.
     */
    data: AIDocumentChatCreateManyInput | AIDocumentChatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AIDocumentChat update
   */
  export type AIDocumentChatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * The data needed to update a AIDocumentChat.
     */
    data: XOR<AIDocumentChatUpdateInput, AIDocumentChatUncheckedUpdateInput>
    /**
     * Choose, which AIDocumentChat to update.
     */
    where: AIDocumentChatWhereUniqueInput
  }

  /**
   * AIDocumentChat updateMany
   */
  export type AIDocumentChatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIDocumentChats.
     */
    data: XOR<AIDocumentChatUpdateManyMutationInput, AIDocumentChatUncheckedUpdateManyInput>
    /**
     * Filter which AIDocumentChats to update
     */
    where?: AIDocumentChatWhereInput
  }

  /**
   * AIDocumentChat upsert
   */
  export type AIDocumentChatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * The filter to search for the AIDocumentChat to update in case it exists.
     */
    where: AIDocumentChatWhereUniqueInput
    /**
     * In case the AIDocumentChat found by the `where` argument doesn't exist, create a new AIDocumentChat with this data.
     */
    create: XOR<AIDocumentChatCreateInput, AIDocumentChatUncheckedCreateInput>
    /**
     * In case the AIDocumentChat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIDocumentChatUpdateInput, AIDocumentChatUncheckedUpdateInput>
  }

  /**
   * AIDocumentChat delete
   */
  export type AIDocumentChatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
    /**
     * Filter which AIDocumentChat to delete.
     */
    where: AIDocumentChatWhereUniqueInput
  }

  /**
   * AIDocumentChat deleteMany
   */
  export type AIDocumentChatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIDocumentChats to delete
     */
    where?: AIDocumentChatWhereInput
  }

  /**
   * AIDocumentChat without action
   */
  export type AIDocumentChatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIDocumentChat
     */
    select?: AIDocumentChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIDocumentChatInclude<ExtArgs> | null
  }


  /**
   * Model QuestionCategory
   */

  export type AggregateQuestionCategory = {
    _count: QuestionCategoryCountAggregateOutputType | null
    _avg: QuestionCategoryAvgAggregateOutputType | null
    _sum: QuestionCategorySumAggregateOutputType | null
    _min: QuestionCategoryMinAggregateOutputType | null
    _max: QuestionCategoryMaxAggregateOutputType | null
  }

  export type QuestionCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type QuestionCategorySumAggregateOutputType = {
    id: number | null
  }

  export type QuestionCategoryMinAggregateOutputType = {
    id: number | null
    categorytype: string | null
    createdAt: Date | null
  }

  export type QuestionCategoryMaxAggregateOutputType = {
    id: number | null
    categorytype: string | null
    createdAt: Date | null
  }

  export type QuestionCategoryCountAggregateOutputType = {
    id: number
    categorytype: number
    createdAt: number
    _all: number
  }


  export type QuestionCategoryAvgAggregateInputType = {
    id?: true
  }

  export type QuestionCategorySumAggregateInputType = {
    id?: true
  }

  export type QuestionCategoryMinAggregateInputType = {
    id?: true
    categorytype?: true
    createdAt?: true
  }

  export type QuestionCategoryMaxAggregateInputType = {
    id?: true
    categorytype?: true
    createdAt?: true
  }

  export type QuestionCategoryCountAggregateInputType = {
    id?: true
    categorytype?: true
    createdAt?: true
    _all?: true
  }

  export type QuestionCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionCategory to aggregate.
     */
    where?: QuestionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionCategories to fetch.
     */
    orderBy?: QuestionCategoryOrderByWithRelationInput | QuestionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionCategories
    **/
    _count?: true | QuestionCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionCategoryMaxAggregateInputType
  }

  export type GetQuestionCategoryAggregateType<T extends QuestionCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionCategory[P]>
      : GetScalarType<T[P], AggregateQuestionCategory[P]>
  }




  export type QuestionCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionCategoryWhereInput
    orderBy?: QuestionCategoryOrderByWithAggregationInput | QuestionCategoryOrderByWithAggregationInput[]
    by: QuestionCategoryScalarFieldEnum[] | QuestionCategoryScalarFieldEnum
    having?: QuestionCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCategoryCountAggregateInputType | true
    _avg?: QuestionCategoryAvgAggregateInputType
    _sum?: QuestionCategorySumAggregateInputType
    _min?: QuestionCategoryMinAggregateInputType
    _max?: QuestionCategoryMaxAggregateInputType
  }

  export type QuestionCategoryGroupByOutputType = {
    id: number
    categorytype: string
    createdAt: Date
    _count: QuestionCategoryCountAggregateOutputType | null
    _avg: QuestionCategoryAvgAggregateOutputType | null
    _sum: QuestionCategorySumAggregateOutputType | null
    _min: QuestionCategoryMinAggregateOutputType | null
    _max: QuestionCategoryMaxAggregateOutputType | null
  }

  type GetQuestionCategoryGroupByPayload<T extends QuestionCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionCategoryGroupByOutputType[P]>
        }
      >
    >


  export type QuestionCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categorytype?: boolean
    createdAt?: boolean
    answers?: boolean | QuestionCategory$answersArgs<ExtArgs>
    _count?: boolean | QuestionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionCategory"]>

  export type QuestionCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categorytype?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["questionCategory"]>

  export type QuestionCategorySelectScalar = {
    id?: boolean
    categorytype?: boolean
    createdAt?: boolean
  }

  export type QuestionCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | QuestionCategory$answersArgs<ExtArgs>
    _count?: boolean | QuestionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $QuestionCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionCategory"
    objects: {
      answers: Prisma.$QuestionAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categorytype: string
      createdAt: Date
    }, ExtArgs["result"]["questionCategory"]>
    composites: {}
  }

  type QuestionCategoryGetPayload<S extends boolean | null | undefined | QuestionCategoryDefaultArgs> = $Result.GetResult<Prisma.$QuestionCategoryPayload, S>

  type QuestionCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionCategoryCountAggregateInputType | true
    }

  export interface QuestionCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionCategory'], meta: { name: 'QuestionCategory' } }
    /**
     * Find zero or one QuestionCategory that matches the filter.
     * @param {QuestionCategoryFindUniqueArgs} args - Arguments to find a QuestionCategory
     * @example
     * // Get one QuestionCategory
     * const questionCategory = await prisma.questionCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionCategoryFindUniqueArgs>(args: SelectSubset<T, QuestionCategoryFindUniqueArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QuestionCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionCategoryFindUniqueOrThrowArgs} args - Arguments to find a QuestionCategory
     * @example
     * // Get one QuestionCategory
     * const questionCategory = await prisma.questionCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QuestionCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCategoryFindFirstArgs} args - Arguments to find a QuestionCategory
     * @example
     * // Get one QuestionCategory
     * const questionCategory = await prisma.questionCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionCategoryFindFirstArgs>(args?: SelectSubset<T, QuestionCategoryFindFirstArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QuestionCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCategoryFindFirstOrThrowArgs} args - Arguments to find a QuestionCategory
     * @example
     * // Get one QuestionCategory
     * const questionCategory = await prisma.questionCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QuestionCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionCategories
     * const questionCategories = await prisma.questionCategory.findMany()
     * 
     * // Get first 10 QuestionCategories
     * const questionCategories = await prisma.questionCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionCategoryWithIdOnly = await prisma.questionCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionCategoryFindManyArgs>(args?: SelectSubset<T, QuestionCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QuestionCategory.
     * @param {QuestionCategoryCreateArgs} args - Arguments to create a QuestionCategory.
     * @example
     * // Create one QuestionCategory
     * const QuestionCategory = await prisma.questionCategory.create({
     *   data: {
     *     // ... data to create a QuestionCategory
     *   }
     * })
     * 
     */
    create<T extends QuestionCategoryCreateArgs>(args: SelectSubset<T, QuestionCategoryCreateArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QuestionCategories.
     * @param {QuestionCategoryCreateManyArgs} args - Arguments to create many QuestionCategories.
     * @example
     * // Create many QuestionCategories
     * const questionCategory = await prisma.questionCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCategoryCreateManyArgs>(args?: SelectSubset<T, QuestionCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionCategories and returns the data saved in the database.
     * @param {QuestionCategoryCreateManyAndReturnArgs} args - Arguments to create many QuestionCategories.
     * @example
     * // Create many QuestionCategories
     * const questionCategory = await prisma.questionCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionCategories and only return the `id`
     * const questionCategoryWithIdOnly = await prisma.questionCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QuestionCategory.
     * @param {QuestionCategoryDeleteArgs} args - Arguments to delete one QuestionCategory.
     * @example
     * // Delete one QuestionCategory
     * const QuestionCategory = await prisma.questionCategory.delete({
     *   where: {
     *     // ... filter to delete one QuestionCategory
     *   }
     * })
     * 
     */
    delete<T extends QuestionCategoryDeleteArgs>(args: SelectSubset<T, QuestionCategoryDeleteArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QuestionCategory.
     * @param {QuestionCategoryUpdateArgs} args - Arguments to update one QuestionCategory.
     * @example
     * // Update one QuestionCategory
     * const questionCategory = await prisma.questionCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionCategoryUpdateArgs>(args: SelectSubset<T, QuestionCategoryUpdateArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QuestionCategories.
     * @param {QuestionCategoryDeleteManyArgs} args - Arguments to filter QuestionCategories to delete.
     * @example
     * // Delete a few QuestionCategories
     * const { count } = await prisma.questionCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionCategoryDeleteManyArgs>(args?: SelectSubset<T, QuestionCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionCategories
     * const questionCategory = await prisma.questionCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionCategoryUpdateManyArgs>(args: SelectSubset<T, QuestionCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QuestionCategory.
     * @param {QuestionCategoryUpsertArgs} args - Arguments to update or create a QuestionCategory.
     * @example
     * // Update or create a QuestionCategory
     * const questionCategory = await prisma.questionCategory.upsert({
     *   create: {
     *     // ... data to create a QuestionCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionCategory we want to update
     *   }
     * })
     */
    upsert<T extends QuestionCategoryUpsertArgs>(args: SelectSubset<T, QuestionCategoryUpsertArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QuestionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCategoryCountArgs} args - Arguments to filter QuestionCategories to count.
     * @example
     * // Count the number of QuestionCategories
     * const count = await prisma.questionCategory.count({
     *   where: {
     *     // ... the filter for the QuestionCategories we want to count
     *   }
     * })
    **/
    count<T extends QuestionCategoryCountArgs>(
      args?: Subset<T, QuestionCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionCategoryAggregateArgs>(args: Subset<T, QuestionCategoryAggregateArgs>): Prisma.PrismaPromise<GetQuestionCategoryAggregateType<T>>

    /**
     * Group by QuestionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionCategoryGroupByArgs['orderBy'] }
        : { orderBy?: QuestionCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionCategory model
   */
  readonly fields: QuestionCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    answers<T extends QuestionCategory$answersArgs<ExtArgs> = {}>(args?: Subset<T, QuestionCategory$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionCategory model
   */ 
  interface QuestionCategoryFieldRefs {
    readonly id: FieldRef<"QuestionCategory", 'Int'>
    readonly categorytype: FieldRef<"QuestionCategory", 'String'>
    readonly createdAt: FieldRef<"QuestionCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionCategory findUnique
   */
  export type QuestionCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which QuestionCategory to fetch.
     */
    where: QuestionCategoryWhereUniqueInput
  }

  /**
   * QuestionCategory findUniqueOrThrow
   */
  export type QuestionCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which QuestionCategory to fetch.
     */
    where: QuestionCategoryWhereUniqueInput
  }

  /**
   * QuestionCategory findFirst
   */
  export type QuestionCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which QuestionCategory to fetch.
     */
    where?: QuestionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionCategories to fetch.
     */
    orderBy?: QuestionCategoryOrderByWithRelationInput | QuestionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionCategories.
     */
    cursor?: QuestionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionCategories.
     */
    distinct?: QuestionCategoryScalarFieldEnum | QuestionCategoryScalarFieldEnum[]
  }

  /**
   * QuestionCategory findFirstOrThrow
   */
  export type QuestionCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which QuestionCategory to fetch.
     */
    where?: QuestionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionCategories to fetch.
     */
    orderBy?: QuestionCategoryOrderByWithRelationInput | QuestionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionCategories.
     */
    cursor?: QuestionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionCategories.
     */
    distinct?: QuestionCategoryScalarFieldEnum | QuestionCategoryScalarFieldEnum[]
  }

  /**
   * QuestionCategory findMany
   */
  export type QuestionCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which QuestionCategories to fetch.
     */
    where?: QuestionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionCategories to fetch.
     */
    orderBy?: QuestionCategoryOrderByWithRelationInput | QuestionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionCategories.
     */
    cursor?: QuestionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionCategories.
     */
    skip?: number
    distinct?: QuestionCategoryScalarFieldEnum | QuestionCategoryScalarFieldEnum[]
  }

  /**
   * QuestionCategory create
   */
  export type QuestionCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionCategory.
     */
    data: XOR<QuestionCategoryCreateInput, QuestionCategoryUncheckedCreateInput>
  }

  /**
   * QuestionCategory createMany
   */
  export type QuestionCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionCategories.
     */
    data: QuestionCategoryCreateManyInput | QuestionCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionCategory createManyAndReturn
   */
  export type QuestionCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QuestionCategories.
     */
    data: QuestionCategoryCreateManyInput | QuestionCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionCategory update
   */
  export type QuestionCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionCategory.
     */
    data: XOR<QuestionCategoryUpdateInput, QuestionCategoryUncheckedUpdateInput>
    /**
     * Choose, which QuestionCategory to update.
     */
    where: QuestionCategoryWhereUniqueInput
  }

  /**
   * QuestionCategory updateMany
   */
  export type QuestionCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionCategories.
     */
    data: XOR<QuestionCategoryUpdateManyMutationInput, QuestionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which QuestionCategories to update
     */
    where?: QuestionCategoryWhereInput
  }

  /**
   * QuestionCategory upsert
   */
  export type QuestionCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionCategory to update in case it exists.
     */
    where: QuestionCategoryWhereUniqueInput
    /**
     * In case the QuestionCategory found by the `where` argument doesn't exist, create a new QuestionCategory with this data.
     */
    create: XOR<QuestionCategoryCreateInput, QuestionCategoryUncheckedCreateInput>
    /**
     * In case the QuestionCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionCategoryUpdateInput, QuestionCategoryUncheckedUpdateInput>
  }

  /**
   * QuestionCategory delete
   */
  export type QuestionCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
    /**
     * Filter which QuestionCategory to delete.
     */
    where: QuestionCategoryWhereUniqueInput
  }

  /**
   * QuestionCategory deleteMany
   */
  export type QuestionCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionCategories to delete
     */
    where?: QuestionCategoryWhereInput
  }

  /**
   * QuestionCategory.answers
   */
  export type QuestionCategory$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    where?: QuestionAnswerWhereInput
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    cursor?: QuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * QuestionCategory without action
   */
  export type QuestionCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCategory
     */
    select?: QuestionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionCategoryInclude<ExtArgs> | null
  }


  /**
   * Model QuestionAnswer
   */

  export type AggregateQuestionAnswer = {
    _count: QuestionAnswerCountAggregateOutputType | null
    _avg: QuestionAnswerAvgAggregateOutputType | null
    _sum: QuestionAnswerSumAggregateOutputType | null
    _min: QuestionAnswerMinAggregateOutputType | null
    _max: QuestionAnswerMaxAggregateOutputType | null
  }

  export type QuestionAnswerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    categoryId: number | null
  }

  export type QuestionAnswerSumAggregateOutputType = {
    id: number | null
    userId: number | null
    categoryId: number | null
  }

  export type QuestionAnswerMinAggregateOutputType = {
    id: number | null
    answer: string | null
    userId: number | null
    categoryId: number | null
    createdAt: Date | null
  }

  export type QuestionAnswerMaxAggregateOutputType = {
    id: number | null
    answer: string | null
    userId: number | null
    categoryId: number | null
    createdAt: Date | null
  }

  export type QuestionAnswerCountAggregateOutputType = {
    id: number
    answer: number
    userId: number
    categoryId: number
    createdAt: number
    _all: number
  }


  export type QuestionAnswerAvgAggregateInputType = {
    id?: true
    userId?: true
    categoryId?: true
  }

  export type QuestionAnswerSumAggregateInputType = {
    id?: true
    userId?: true
    categoryId?: true
  }

  export type QuestionAnswerMinAggregateInputType = {
    id?: true
    answer?: true
    userId?: true
    categoryId?: true
    createdAt?: true
  }

  export type QuestionAnswerMaxAggregateInputType = {
    id?: true
    answer?: true
    userId?: true
    categoryId?: true
    createdAt?: true
  }

  export type QuestionAnswerCountAggregateInputType = {
    id?: true
    answer?: true
    userId?: true
    categoryId?: true
    createdAt?: true
    _all?: true
  }

  export type QuestionAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionAnswer to aggregate.
     */
    where?: QuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAnswers to fetch.
     */
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionAnswers
    **/
    _count?: true | QuestionAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionAnswerMaxAggregateInputType
  }

  export type GetQuestionAnswerAggregateType<T extends QuestionAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionAnswer[P]>
      : GetScalarType<T[P], AggregateQuestionAnswer[P]>
  }




  export type QuestionAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAnswerWhereInput
    orderBy?: QuestionAnswerOrderByWithAggregationInput | QuestionAnswerOrderByWithAggregationInput[]
    by: QuestionAnswerScalarFieldEnum[] | QuestionAnswerScalarFieldEnum
    having?: QuestionAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionAnswerCountAggregateInputType | true
    _avg?: QuestionAnswerAvgAggregateInputType
    _sum?: QuestionAnswerSumAggregateInputType
    _min?: QuestionAnswerMinAggregateInputType
    _max?: QuestionAnswerMaxAggregateInputType
  }

  export type QuestionAnswerGroupByOutputType = {
    id: number
    answer: string
    userId: number
    categoryId: number
    createdAt: Date
    _count: QuestionAnswerCountAggregateOutputType | null
    _avg: QuestionAnswerAvgAggregateOutputType | null
    _sum: QuestionAnswerSumAggregateOutputType | null
    _min: QuestionAnswerMinAggregateOutputType | null
    _max: QuestionAnswerMaxAggregateOutputType | null
  }

  type GetQuestionAnswerGroupByPayload<T extends QuestionAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionAnswerGroupByOutputType[P]>
        }
      >
    >


  export type QuestionAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    userId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | QuestionCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAnswer"]>

  export type QuestionAnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    userId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | QuestionCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAnswer"]>

  export type QuestionAnswerSelectScalar = {
    id?: boolean
    answer?: boolean
    userId?: boolean
    categoryId?: boolean
    createdAt?: boolean
  }

  export type QuestionAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | QuestionCategoryDefaultArgs<ExtArgs>
  }
  export type QuestionAnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | QuestionCategoryDefaultArgs<ExtArgs>
  }

  export type $QuestionAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionAnswer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$QuestionCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      answer: string
      userId: number
      categoryId: number
      createdAt: Date
    }, ExtArgs["result"]["questionAnswer"]>
    composites: {}
  }

  type QuestionAnswerGetPayload<S extends boolean | null | undefined | QuestionAnswerDefaultArgs> = $Result.GetResult<Prisma.$QuestionAnswerPayload, S>

  type QuestionAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionAnswerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionAnswerCountAggregateInputType | true
    }

  export interface QuestionAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionAnswer'], meta: { name: 'QuestionAnswer' } }
    /**
     * Find zero or one QuestionAnswer that matches the filter.
     * @param {QuestionAnswerFindUniqueArgs} args - Arguments to find a QuestionAnswer
     * @example
     * // Get one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionAnswerFindUniqueArgs>(args: SelectSubset<T, QuestionAnswerFindUniqueArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QuestionAnswer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionAnswerFindUniqueOrThrowArgs} args - Arguments to find a QuestionAnswer
     * @example
     * // Get one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QuestionAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerFindFirstArgs} args - Arguments to find a QuestionAnswer
     * @example
     * // Get one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionAnswerFindFirstArgs>(args?: SelectSubset<T, QuestionAnswerFindFirstArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QuestionAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerFindFirstOrThrowArgs} args - Arguments to find a QuestionAnswer
     * @example
     * // Get one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QuestionAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionAnswers
     * const questionAnswers = await prisma.questionAnswer.findMany()
     * 
     * // Get first 10 QuestionAnswers
     * const questionAnswers = await prisma.questionAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionAnswerWithIdOnly = await prisma.questionAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionAnswerFindManyArgs>(args?: SelectSubset<T, QuestionAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QuestionAnswer.
     * @param {QuestionAnswerCreateArgs} args - Arguments to create a QuestionAnswer.
     * @example
     * // Create one QuestionAnswer
     * const QuestionAnswer = await prisma.questionAnswer.create({
     *   data: {
     *     // ... data to create a QuestionAnswer
     *   }
     * })
     * 
     */
    create<T extends QuestionAnswerCreateArgs>(args: SelectSubset<T, QuestionAnswerCreateArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QuestionAnswers.
     * @param {QuestionAnswerCreateManyArgs} args - Arguments to create many QuestionAnswers.
     * @example
     * // Create many QuestionAnswers
     * const questionAnswer = await prisma.questionAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionAnswerCreateManyArgs>(args?: SelectSubset<T, QuestionAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionAnswers and returns the data saved in the database.
     * @param {QuestionAnswerCreateManyAndReturnArgs} args - Arguments to create many QuestionAnswers.
     * @example
     * // Create many QuestionAnswers
     * const questionAnswer = await prisma.questionAnswer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionAnswers and only return the `id`
     * const questionAnswerWithIdOnly = await prisma.questionAnswer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionAnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionAnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QuestionAnswer.
     * @param {QuestionAnswerDeleteArgs} args - Arguments to delete one QuestionAnswer.
     * @example
     * // Delete one QuestionAnswer
     * const QuestionAnswer = await prisma.questionAnswer.delete({
     *   where: {
     *     // ... filter to delete one QuestionAnswer
     *   }
     * })
     * 
     */
    delete<T extends QuestionAnswerDeleteArgs>(args: SelectSubset<T, QuestionAnswerDeleteArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QuestionAnswer.
     * @param {QuestionAnswerUpdateArgs} args - Arguments to update one QuestionAnswer.
     * @example
     * // Update one QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionAnswerUpdateArgs>(args: SelectSubset<T, QuestionAnswerUpdateArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QuestionAnswers.
     * @param {QuestionAnswerDeleteManyArgs} args - Arguments to filter QuestionAnswers to delete.
     * @example
     * // Delete a few QuestionAnswers
     * const { count } = await prisma.questionAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionAnswerDeleteManyArgs>(args?: SelectSubset<T, QuestionAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionAnswers
     * const questionAnswer = await prisma.questionAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionAnswerUpdateManyArgs>(args: SelectSubset<T, QuestionAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QuestionAnswer.
     * @param {QuestionAnswerUpsertArgs} args - Arguments to update or create a QuestionAnswer.
     * @example
     * // Update or create a QuestionAnswer
     * const questionAnswer = await prisma.questionAnswer.upsert({
     *   create: {
     *     // ... data to create a QuestionAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionAnswer we want to update
     *   }
     * })
     */
    upsert<T extends QuestionAnswerUpsertArgs>(args: SelectSubset<T, QuestionAnswerUpsertArgs<ExtArgs>>): Prisma__QuestionAnswerClient<$Result.GetResult<Prisma.$QuestionAnswerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerCountArgs} args - Arguments to filter QuestionAnswers to count.
     * @example
     * // Count the number of QuestionAnswers
     * const count = await prisma.questionAnswer.count({
     *   where: {
     *     // ... the filter for the QuestionAnswers we want to count
     *   }
     * })
    **/
    count<T extends QuestionAnswerCountArgs>(
      args?: Subset<T, QuestionAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAnswerAggregateArgs>(args: Subset<T, QuestionAnswerAggregateArgs>): Prisma.PrismaPromise<GetQuestionAnswerAggregateType<T>>

    /**
     * Group by QuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionAnswerGroupByArgs['orderBy'] }
        : { orderBy?: QuestionAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionAnswer model
   */
  readonly fields: QuestionAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends QuestionCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionCategoryDefaultArgs<ExtArgs>>): Prisma__QuestionCategoryClient<$Result.GetResult<Prisma.$QuestionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionAnswer model
   */ 
  interface QuestionAnswerFieldRefs {
    readonly id: FieldRef<"QuestionAnswer", 'Int'>
    readonly answer: FieldRef<"QuestionAnswer", 'String'>
    readonly userId: FieldRef<"QuestionAnswer", 'Int'>
    readonly categoryId: FieldRef<"QuestionAnswer", 'Int'>
    readonly createdAt: FieldRef<"QuestionAnswer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionAnswer findUnique
   */
  export type QuestionAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswer to fetch.
     */
    where: QuestionAnswerWhereUniqueInput
  }

  /**
   * QuestionAnswer findUniqueOrThrow
   */
  export type QuestionAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswer to fetch.
     */
    where: QuestionAnswerWhereUniqueInput
  }

  /**
   * QuestionAnswer findFirst
   */
  export type QuestionAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswer to fetch.
     */
    where?: QuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAnswers to fetch.
     */
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionAnswers.
     */
    cursor?: QuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionAnswers.
     */
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * QuestionAnswer findFirstOrThrow
   */
  export type QuestionAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswer to fetch.
     */
    where?: QuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAnswers to fetch.
     */
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionAnswers.
     */
    cursor?: QuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionAnswers.
     */
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * QuestionAnswer findMany
   */
  export type QuestionAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAnswers to fetch.
     */
    where?: QuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAnswers to fetch.
     */
    orderBy?: QuestionAnswerOrderByWithRelationInput | QuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionAnswers.
     */
    cursor?: QuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAnswers.
     */
    skip?: number
    distinct?: QuestionAnswerScalarFieldEnum | QuestionAnswerScalarFieldEnum[]
  }

  /**
   * QuestionAnswer create
   */
  export type QuestionAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionAnswer.
     */
    data: XOR<QuestionAnswerCreateInput, QuestionAnswerUncheckedCreateInput>
  }

  /**
   * QuestionAnswer createMany
   */
  export type QuestionAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionAnswers.
     */
    data: QuestionAnswerCreateManyInput | QuestionAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionAnswer createManyAndReturn
   */
  export type QuestionAnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QuestionAnswers.
     */
    data: QuestionAnswerCreateManyInput | QuestionAnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionAnswer update
   */
  export type QuestionAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionAnswer.
     */
    data: XOR<QuestionAnswerUpdateInput, QuestionAnswerUncheckedUpdateInput>
    /**
     * Choose, which QuestionAnswer to update.
     */
    where: QuestionAnswerWhereUniqueInput
  }

  /**
   * QuestionAnswer updateMany
   */
  export type QuestionAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionAnswers.
     */
    data: XOR<QuestionAnswerUpdateManyMutationInput, QuestionAnswerUncheckedUpdateManyInput>
    /**
     * Filter which QuestionAnswers to update
     */
    where?: QuestionAnswerWhereInput
  }

  /**
   * QuestionAnswer upsert
   */
  export type QuestionAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionAnswer to update in case it exists.
     */
    where: QuestionAnswerWhereUniqueInput
    /**
     * In case the QuestionAnswer found by the `where` argument doesn't exist, create a new QuestionAnswer with this data.
     */
    create: XOR<QuestionAnswerCreateInput, QuestionAnswerUncheckedCreateInput>
    /**
     * In case the QuestionAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionAnswerUpdateInput, QuestionAnswerUncheckedUpdateInput>
  }

  /**
   * QuestionAnswer delete
   */
  export type QuestionAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter which QuestionAnswer to delete.
     */
    where: QuestionAnswerWhereUniqueInput
  }

  /**
   * QuestionAnswer deleteMany
   */
  export type QuestionAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionAnswers to delete
     */
    where?: QuestionAnswerWhereInput
  }

  /**
   * QuestionAnswer without action
   */
  export type QuestionAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAnswer
     */
    select?: QuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAnswerInclude<ExtArgs> | null
  }


  /**
   * Model Prompt
   */

  export type AggregatePrompt = {
    _count: PromptCountAggregateOutputType | null
    _avg: PromptAvgAggregateOutputType | null
    _sum: PromptSumAggregateOutputType | null
    _min: PromptMinAggregateOutputType | null
    _max: PromptMaxAggregateOutputType | null
  }

  export type PromptAvgAggregateOutputType = {
    id: number | null
  }

  export type PromptSumAggregateOutputType = {
    id: number | null
  }

  export type PromptMinAggregateOutputType = {
    id: number | null
    prompt1: string | null
    prompt2: string | null
    prompt3: string | null
  }

  export type PromptMaxAggregateOutputType = {
    id: number | null
    prompt1: string | null
    prompt2: string | null
    prompt3: string | null
  }

  export type PromptCountAggregateOutputType = {
    id: number
    prompt1: number
    prompt2: number
    prompt3: number
    _all: number
  }


  export type PromptAvgAggregateInputType = {
    id?: true
  }

  export type PromptSumAggregateInputType = {
    id?: true
  }

  export type PromptMinAggregateInputType = {
    id?: true
    prompt1?: true
    prompt2?: true
    prompt3?: true
  }

  export type PromptMaxAggregateInputType = {
    id?: true
    prompt1?: true
    prompt2?: true
    prompt3?: true
  }

  export type PromptCountAggregateInputType = {
    id?: true
    prompt1?: true
    prompt2?: true
    prompt3?: true
    _all?: true
  }

  export type PromptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prompt to aggregate.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prompts
    **/
    _count?: true | PromptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromptMaxAggregateInputType
  }

  export type GetPromptAggregateType<T extends PromptAggregateArgs> = {
        [P in keyof T & keyof AggregatePrompt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrompt[P]>
      : GetScalarType<T[P], AggregatePrompt[P]>
  }




  export type PromptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptWhereInput
    orderBy?: PromptOrderByWithAggregationInput | PromptOrderByWithAggregationInput[]
    by: PromptScalarFieldEnum[] | PromptScalarFieldEnum
    having?: PromptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromptCountAggregateInputType | true
    _avg?: PromptAvgAggregateInputType
    _sum?: PromptSumAggregateInputType
    _min?: PromptMinAggregateInputType
    _max?: PromptMaxAggregateInputType
  }

  export type PromptGroupByOutputType = {
    id: number
    prompt1: string
    prompt2: string | null
    prompt3: string | null
    _count: PromptCountAggregateOutputType | null
    _avg: PromptAvgAggregateOutputType | null
    _sum: PromptSumAggregateOutputType | null
    _min: PromptMinAggregateOutputType | null
    _max: PromptMaxAggregateOutputType | null
  }

  type GetPromptGroupByPayload<T extends PromptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromptGroupByOutputType[P]>
            : GetScalarType<T[P], PromptGroupByOutputType[P]>
        }
      >
    >


  export type PromptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prompt1?: boolean
    prompt2?: boolean
    prompt3?: boolean
  }, ExtArgs["result"]["prompt"]>

  export type PromptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prompt1?: boolean
    prompt2?: boolean
    prompt3?: boolean
  }, ExtArgs["result"]["prompt"]>

  export type PromptSelectScalar = {
    id?: boolean
    prompt1?: boolean
    prompt2?: boolean
    prompt3?: boolean
  }


  export type $PromptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prompt"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      prompt1: string
      prompt2: string | null
      prompt3: string | null
    }, ExtArgs["result"]["prompt"]>
    composites: {}
  }

  type PromptGetPayload<S extends boolean | null | undefined | PromptDefaultArgs> = $Result.GetResult<Prisma.$PromptPayload, S>

  type PromptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PromptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PromptCountAggregateInputType | true
    }

  export interface PromptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prompt'], meta: { name: 'Prompt' } }
    /**
     * Find zero or one Prompt that matches the filter.
     * @param {PromptFindUniqueArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromptFindUniqueArgs>(args: SelectSubset<T, PromptFindUniqueArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Prompt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PromptFindUniqueOrThrowArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromptFindUniqueOrThrowArgs>(args: SelectSubset<T, PromptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Prompt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindFirstArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromptFindFirstArgs>(args?: SelectSubset<T, PromptFindFirstArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Prompt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindFirstOrThrowArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromptFindFirstOrThrowArgs>(args?: SelectSubset<T, PromptFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Prompts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prompts
     * const prompts = await prisma.prompt.findMany()
     * 
     * // Get first 10 Prompts
     * const prompts = await prisma.prompt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promptWithIdOnly = await prisma.prompt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromptFindManyArgs>(args?: SelectSubset<T, PromptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Prompt.
     * @param {PromptCreateArgs} args - Arguments to create a Prompt.
     * @example
     * // Create one Prompt
     * const Prompt = await prisma.prompt.create({
     *   data: {
     *     // ... data to create a Prompt
     *   }
     * })
     * 
     */
    create<T extends PromptCreateArgs>(args: SelectSubset<T, PromptCreateArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Prompts.
     * @param {PromptCreateManyArgs} args - Arguments to create many Prompts.
     * @example
     * // Create many Prompts
     * const prompt = await prisma.prompt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromptCreateManyArgs>(args?: SelectSubset<T, PromptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prompts and returns the data saved in the database.
     * @param {PromptCreateManyAndReturnArgs} args - Arguments to create many Prompts.
     * @example
     * // Create many Prompts
     * const prompt = await prisma.prompt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prompts and only return the `id`
     * const promptWithIdOnly = await prisma.prompt.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromptCreateManyAndReturnArgs>(args?: SelectSubset<T, PromptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Prompt.
     * @param {PromptDeleteArgs} args - Arguments to delete one Prompt.
     * @example
     * // Delete one Prompt
     * const Prompt = await prisma.prompt.delete({
     *   where: {
     *     // ... filter to delete one Prompt
     *   }
     * })
     * 
     */
    delete<T extends PromptDeleteArgs>(args: SelectSubset<T, PromptDeleteArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Prompt.
     * @param {PromptUpdateArgs} args - Arguments to update one Prompt.
     * @example
     * // Update one Prompt
     * const prompt = await prisma.prompt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromptUpdateArgs>(args: SelectSubset<T, PromptUpdateArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Prompts.
     * @param {PromptDeleteManyArgs} args - Arguments to filter Prompts to delete.
     * @example
     * // Delete a few Prompts
     * const { count } = await prisma.prompt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromptDeleteManyArgs>(args?: SelectSubset<T, PromptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prompts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prompts
     * const prompt = await prisma.prompt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromptUpdateManyArgs>(args: SelectSubset<T, PromptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prompt.
     * @param {PromptUpsertArgs} args - Arguments to update or create a Prompt.
     * @example
     * // Update or create a Prompt
     * const prompt = await prisma.prompt.upsert({
     *   create: {
     *     // ... data to create a Prompt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prompt we want to update
     *   }
     * })
     */
    upsert<T extends PromptUpsertArgs>(args: SelectSubset<T, PromptUpsertArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Prompts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptCountArgs} args - Arguments to filter Prompts to count.
     * @example
     * // Count the number of Prompts
     * const count = await prisma.prompt.count({
     *   where: {
     *     // ... the filter for the Prompts we want to count
     *   }
     * })
    **/
    count<T extends PromptCountArgs>(
      args?: Subset<T, PromptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prompt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromptAggregateArgs>(args: Subset<T, PromptAggregateArgs>): Prisma.PrismaPromise<GetPromptAggregateType<T>>

    /**
     * Group by Prompt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromptGroupByArgs['orderBy'] }
        : { orderBy?: PromptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prompt model
   */
  readonly fields: PromptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prompt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Prompt model
   */ 
  interface PromptFieldRefs {
    readonly id: FieldRef<"Prompt", 'Int'>
    readonly prompt1: FieldRef<"Prompt", 'String'>
    readonly prompt2: FieldRef<"Prompt", 'String'>
    readonly prompt3: FieldRef<"Prompt", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Prompt findUnique
   */
  export type PromptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where: PromptWhereUniqueInput
  }

  /**
   * Prompt findUniqueOrThrow
   */
  export type PromptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where: PromptWhereUniqueInput
  }

  /**
   * Prompt findFirst
   */
  export type PromptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prompts.
     */
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }

  /**
   * Prompt findFirstOrThrow
   */
  export type PromptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prompts.
     */
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }

  /**
   * Prompt findMany
   */
  export type PromptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Filter, which Prompts to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }

  /**
   * Prompt create
   */
  export type PromptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * The data needed to create a Prompt.
     */
    data: XOR<PromptCreateInput, PromptUncheckedCreateInput>
  }

  /**
   * Prompt createMany
   */
  export type PromptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prompts.
     */
    data: PromptCreateManyInput | PromptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Prompt createManyAndReturn
   */
  export type PromptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Prompts.
     */
    data: PromptCreateManyInput | PromptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Prompt update
   */
  export type PromptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * The data needed to update a Prompt.
     */
    data: XOR<PromptUpdateInput, PromptUncheckedUpdateInput>
    /**
     * Choose, which Prompt to update.
     */
    where: PromptWhereUniqueInput
  }

  /**
   * Prompt updateMany
   */
  export type PromptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prompts.
     */
    data: XOR<PromptUpdateManyMutationInput, PromptUncheckedUpdateManyInput>
    /**
     * Filter which Prompts to update
     */
    where?: PromptWhereInput
  }

  /**
   * Prompt upsert
   */
  export type PromptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * The filter to search for the Prompt to update in case it exists.
     */
    where: PromptWhereUniqueInput
    /**
     * In case the Prompt found by the `where` argument doesn't exist, create a new Prompt with this data.
     */
    create: XOR<PromptCreateInput, PromptUncheckedCreateInput>
    /**
     * In case the Prompt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromptUpdateInput, PromptUncheckedUpdateInput>
  }

  /**
   * Prompt delete
   */
  export type PromptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Filter which Prompt to delete.
     */
    where: PromptWhereUniqueInput
  }

  /**
   * Prompt deleteMany
   */
  export type PromptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prompts to delete
     */
    where?: PromptWhereInput
  }

  /**
   * Prompt without action
   */
  export type PromptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
  }


  /**
   * Model PromptLogs
   */

  export type AggregatePromptLogs = {
    _count: PromptLogsCountAggregateOutputType | null
    _avg: PromptLogsAvgAggregateOutputType | null
    _sum: PromptLogsSumAggregateOutputType | null
    _min: PromptLogsMinAggregateOutputType | null
    _max: PromptLogsMaxAggregateOutputType | null
  }

  export type PromptLogsAvgAggregateOutputType = {
    id: number | null
  }

  export type PromptLogsSumAggregateOutputType = {
    id: number | null
  }

  export type PromptLogsMinAggregateOutputType = {
    id: number | null
    prompt1: string | null
    prompt2: string | null
    prompt3: string | null
    status: boolean | null
  }

  export type PromptLogsMaxAggregateOutputType = {
    id: number | null
    prompt1: string | null
    prompt2: string | null
    prompt3: string | null
    status: boolean | null
  }

  export type PromptLogsCountAggregateOutputType = {
    id: number
    prompt1: number
    prompt2: number
    prompt3: number
    status: number
    _all: number
  }


  export type PromptLogsAvgAggregateInputType = {
    id?: true
  }

  export type PromptLogsSumAggregateInputType = {
    id?: true
  }

  export type PromptLogsMinAggregateInputType = {
    id?: true
    prompt1?: true
    prompt2?: true
    prompt3?: true
    status?: true
  }

  export type PromptLogsMaxAggregateInputType = {
    id?: true
    prompt1?: true
    prompt2?: true
    prompt3?: true
    status?: true
  }

  export type PromptLogsCountAggregateInputType = {
    id?: true
    prompt1?: true
    prompt2?: true
    prompt3?: true
    status?: true
    _all?: true
  }

  export type PromptLogsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromptLogs to aggregate.
     */
    where?: PromptLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptLogs to fetch.
     */
    orderBy?: PromptLogsOrderByWithRelationInput | PromptLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromptLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromptLogs
    **/
    _count?: true | PromptLogsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromptLogsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromptLogsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromptLogsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromptLogsMaxAggregateInputType
  }

  export type GetPromptLogsAggregateType<T extends PromptLogsAggregateArgs> = {
        [P in keyof T & keyof AggregatePromptLogs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromptLogs[P]>
      : GetScalarType<T[P], AggregatePromptLogs[P]>
  }




  export type PromptLogsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptLogsWhereInput
    orderBy?: PromptLogsOrderByWithAggregationInput | PromptLogsOrderByWithAggregationInput[]
    by: PromptLogsScalarFieldEnum[] | PromptLogsScalarFieldEnum
    having?: PromptLogsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromptLogsCountAggregateInputType | true
    _avg?: PromptLogsAvgAggregateInputType
    _sum?: PromptLogsSumAggregateInputType
    _min?: PromptLogsMinAggregateInputType
    _max?: PromptLogsMaxAggregateInputType
  }

  export type PromptLogsGroupByOutputType = {
    id: number
    prompt1: string
    prompt2: string | null
    prompt3: string | null
    status: boolean
    _count: PromptLogsCountAggregateOutputType | null
    _avg: PromptLogsAvgAggregateOutputType | null
    _sum: PromptLogsSumAggregateOutputType | null
    _min: PromptLogsMinAggregateOutputType | null
    _max: PromptLogsMaxAggregateOutputType | null
  }

  type GetPromptLogsGroupByPayload<T extends PromptLogsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromptLogsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromptLogsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromptLogsGroupByOutputType[P]>
            : GetScalarType<T[P], PromptLogsGroupByOutputType[P]>
        }
      >
    >


  export type PromptLogsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prompt1?: boolean
    prompt2?: boolean
    prompt3?: boolean
    status?: boolean
  }, ExtArgs["result"]["promptLogs"]>

  export type PromptLogsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prompt1?: boolean
    prompt2?: boolean
    prompt3?: boolean
    status?: boolean
  }, ExtArgs["result"]["promptLogs"]>

  export type PromptLogsSelectScalar = {
    id?: boolean
    prompt1?: boolean
    prompt2?: boolean
    prompt3?: boolean
    status?: boolean
  }


  export type $PromptLogsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PromptLogs"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      prompt1: string
      prompt2: string | null
      prompt3: string | null
      status: boolean
    }, ExtArgs["result"]["promptLogs"]>
    composites: {}
  }

  type PromptLogsGetPayload<S extends boolean | null | undefined | PromptLogsDefaultArgs> = $Result.GetResult<Prisma.$PromptLogsPayload, S>

  type PromptLogsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PromptLogsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PromptLogsCountAggregateInputType | true
    }

  export interface PromptLogsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromptLogs'], meta: { name: 'PromptLogs' } }
    /**
     * Find zero or one PromptLogs that matches the filter.
     * @param {PromptLogsFindUniqueArgs} args - Arguments to find a PromptLogs
     * @example
     * // Get one PromptLogs
     * const promptLogs = await prisma.promptLogs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromptLogsFindUniqueArgs>(args: SelectSubset<T, PromptLogsFindUniqueArgs<ExtArgs>>): Prisma__PromptLogsClient<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PromptLogs that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PromptLogsFindUniqueOrThrowArgs} args - Arguments to find a PromptLogs
     * @example
     * // Get one PromptLogs
     * const promptLogs = await prisma.promptLogs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromptLogsFindUniqueOrThrowArgs>(args: SelectSubset<T, PromptLogsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromptLogsClient<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PromptLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptLogsFindFirstArgs} args - Arguments to find a PromptLogs
     * @example
     * // Get one PromptLogs
     * const promptLogs = await prisma.promptLogs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromptLogsFindFirstArgs>(args?: SelectSubset<T, PromptLogsFindFirstArgs<ExtArgs>>): Prisma__PromptLogsClient<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PromptLogs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptLogsFindFirstOrThrowArgs} args - Arguments to find a PromptLogs
     * @example
     * // Get one PromptLogs
     * const promptLogs = await prisma.promptLogs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromptLogsFindFirstOrThrowArgs>(args?: SelectSubset<T, PromptLogsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromptLogsClient<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PromptLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptLogsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromptLogs
     * const promptLogs = await prisma.promptLogs.findMany()
     * 
     * // Get first 10 PromptLogs
     * const promptLogs = await prisma.promptLogs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promptLogsWithIdOnly = await prisma.promptLogs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromptLogsFindManyArgs>(args?: SelectSubset<T, PromptLogsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PromptLogs.
     * @param {PromptLogsCreateArgs} args - Arguments to create a PromptLogs.
     * @example
     * // Create one PromptLogs
     * const PromptLogs = await prisma.promptLogs.create({
     *   data: {
     *     // ... data to create a PromptLogs
     *   }
     * })
     * 
     */
    create<T extends PromptLogsCreateArgs>(args: SelectSubset<T, PromptLogsCreateArgs<ExtArgs>>): Prisma__PromptLogsClient<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PromptLogs.
     * @param {PromptLogsCreateManyArgs} args - Arguments to create many PromptLogs.
     * @example
     * // Create many PromptLogs
     * const promptLogs = await prisma.promptLogs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromptLogsCreateManyArgs>(args?: SelectSubset<T, PromptLogsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PromptLogs and returns the data saved in the database.
     * @param {PromptLogsCreateManyAndReturnArgs} args - Arguments to create many PromptLogs.
     * @example
     * // Create many PromptLogs
     * const promptLogs = await prisma.promptLogs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PromptLogs and only return the `id`
     * const promptLogsWithIdOnly = await prisma.promptLogs.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromptLogsCreateManyAndReturnArgs>(args?: SelectSubset<T, PromptLogsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PromptLogs.
     * @param {PromptLogsDeleteArgs} args - Arguments to delete one PromptLogs.
     * @example
     * // Delete one PromptLogs
     * const PromptLogs = await prisma.promptLogs.delete({
     *   where: {
     *     // ... filter to delete one PromptLogs
     *   }
     * })
     * 
     */
    delete<T extends PromptLogsDeleteArgs>(args: SelectSubset<T, PromptLogsDeleteArgs<ExtArgs>>): Prisma__PromptLogsClient<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PromptLogs.
     * @param {PromptLogsUpdateArgs} args - Arguments to update one PromptLogs.
     * @example
     * // Update one PromptLogs
     * const promptLogs = await prisma.promptLogs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromptLogsUpdateArgs>(args: SelectSubset<T, PromptLogsUpdateArgs<ExtArgs>>): Prisma__PromptLogsClient<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PromptLogs.
     * @param {PromptLogsDeleteManyArgs} args - Arguments to filter PromptLogs to delete.
     * @example
     * // Delete a few PromptLogs
     * const { count } = await prisma.promptLogs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromptLogsDeleteManyArgs>(args?: SelectSubset<T, PromptLogsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromptLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptLogsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromptLogs
     * const promptLogs = await prisma.promptLogs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromptLogsUpdateManyArgs>(args: SelectSubset<T, PromptLogsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PromptLogs.
     * @param {PromptLogsUpsertArgs} args - Arguments to update or create a PromptLogs.
     * @example
     * // Update or create a PromptLogs
     * const promptLogs = await prisma.promptLogs.upsert({
     *   create: {
     *     // ... data to create a PromptLogs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromptLogs we want to update
     *   }
     * })
     */
    upsert<T extends PromptLogsUpsertArgs>(args: SelectSubset<T, PromptLogsUpsertArgs<ExtArgs>>): Prisma__PromptLogsClient<$Result.GetResult<Prisma.$PromptLogsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PromptLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptLogsCountArgs} args - Arguments to filter PromptLogs to count.
     * @example
     * // Count the number of PromptLogs
     * const count = await prisma.promptLogs.count({
     *   where: {
     *     // ... the filter for the PromptLogs we want to count
     *   }
     * })
    **/
    count<T extends PromptLogsCountArgs>(
      args?: Subset<T, PromptLogsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromptLogsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromptLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptLogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromptLogsAggregateArgs>(args: Subset<T, PromptLogsAggregateArgs>): Prisma.PrismaPromise<GetPromptLogsAggregateType<T>>

    /**
     * Group by PromptLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptLogsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromptLogsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromptLogsGroupByArgs['orderBy'] }
        : { orderBy?: PromptLogsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromptLogsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromptLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PromptLogs model
   */
  readonly fields: PromptLogsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PromptLogs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromptLogsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PromptLogs model
   */ 
  interface PromptLogsFieldRefs {
    readonly id: FieldRef<"PromptLogs", 'Int'>
    readonly prompt1: FieldRef<"PromptLogs", 'String'>
    readonly prompt2: FieldRef<"PromptLogs", 'String'>
    readonly prompt3: FieldRef<"PromptLogs", 'String'>
    readonly status: FieldRef<"PromptLogs", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PromptLogs findUnique
   */
  export type PromptLogsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * Filter, which PromptLogs to fetch.
     */
    where: PromptLogsWhereUniqueInput
  }

  /**
   * PromptLogs findUniqueOrThrow
   */
  export type PromptLogsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * Filter, which PromptLogs to fetch.
     */
    where: PromptLogsWhereUniqueInput
  }

  /**
   * PromptLogs findFirst
   */
  export type PromptLogsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * Filter, which PromptLogs to fetch.
     */
    where?: PromptLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptLogs to fetch.
     */
    orderBy?: PromptLogsOrderByWithRelationInput | PromptLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromptLogs.
     */
    cursor?: PromptLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromptLogs.
     */
    distinct?: PromptLogsScalarFieldEnum | PromptLogsScalarFieldEnum[]
  }

  /**
   * PromptLogs findFirstOrThrow
   */
  export type PromptLogsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * Filter, which PromptLogs to fetch.
     */
    where?: PromptLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptLogs to fetch.
     */
    orderBy?: PromptLogsOrderByWithRelationInput | PromptLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromptLogs.
     */
    cursor?: PromptLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromptLogs.
     */
    distinct?: PromptLogsScalarFieldEnum | PromptLogsScalarFieldEnum[]
  }

  /**
   * PromptLogs findMany
   */
  export type PromptLogsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * Filter, which PromptLogs to fetch.
     */
    where?: PromptLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptLogs to fetch.
     */
    orderBy?: PromptLogsOrderByWithRelationInput | PromptLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromptLogs.
     */
    cursor?: PromptLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptLogs.
     */
    skip?: number
    distinct?: PromptLogsScalarFieldEnum | PromptLogsScalarFieldEnum[]
  }

  /**
   * PromptLogs create
   */
  export type PromptLogsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * The data needed to create a PromptLogs.
     */
    data: XOR<PromptLogsCreateInput, PromptLogsUncheckedCreateInput>
  }

  /**
   * PromptLogs createMany
   */
  export type PromptLogsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PromptLogs.
     */
    data: PromptLogsCreateManyInput | PromptLogsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromptLogs createManyAndReturn
   */
  export type PromptLogsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PromptLogs.
     */
    data: PromptLogsCreateManyInput | PromptLogsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromptLogs update
   */
  export type PromptLogsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * The data needed to update a PromptLogs.
     */
    data: XOR<PromptLogsUpdateInput, PromptLogsUncheckedUpdateInput>
    /**
     * Choose, which PromptLogs to update.
     */
    where: PromptLogsWhereUniqueInput
  }

  /**
   * PromptLogs updateMany
   */
  export type PromptLogsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PromptLogs.
     */
    data: XOR<PromptLogsUpdateManyMutationInput, PromptLogsUncheckedUpdateManyInput>
    /**
     * Filter which PromptLogs to update
     */
    where?: PromptLogsWhereInput
  }

  /**
   * PromptLogs upsert
   */
  export type PromptLogsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * The filter to search for the PromptLogs to update in case it exists.
     */
    where: PromptLogsWhereUniqueInput
    /**
     * In case the PromptLogs found by the `where` argument doesn't exist, create a new PromptLogs with this data.
     */
    create: XOR<PromptLogsCreateInput, PromptLogsUncheckedCreateInput>
    /**
     * In case the PromptLogs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromptLogsUpdateInput, PromptLogsUncheckedUpdateInput>
  }

  /**
   * PromptLogs delete
   */
  export type PromptLogsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
    /**
     * Filter which PromptLogs to delete.
     */
    where: PromptLogsWhereUniqueInput
  }

  /**
   * PromptLogs deleteMany
   */
  export type PromptLogsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromptLogs to delete
     */
    where?: PromptLogsWhereInput
  }

  /**
   * PromptLogs without action
   */
  export type PromptLogsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptLogs
     */
    select?: PromptLogsSelect<ExtArgs> | null
  }


  /**
   * Model AIModelAssistant
   */

  export type AggregateAIModelAssistant = {
    _count: AIModelAssistantCountAggregateOutputType | null
    _avg: AIModelAssistantAvgAggregateOutputType | null
    _sum: AIModelAssistantSumAggregateOutputType | null
    _min: AIModelAssistantMinAggregateOutputType | null
    _max: AIModelAssistantMaxAggregateOutputType | null
  }

  export type AIModelAssistantAvgAggregateOutputType = {
    id: number | null
  }

  export type AIModelAssistantSumAggregateOutputType = {
    id: number | null
  }

  export type AIModelAssistantMinAggregateOutputType = {
    id: number | null
    assitantId: string | null
    threadId: string | null
    createdAt: Date | null
  }

  export type AIModelAssistantMaxAggregateOutputType = {
    id: number | null
    assitantId: string | null
    threadId: string | null
    createdAt: Date | null
  }

  export type AIModelAssistantCountAggregateOutputType = {
    id: number
    assitantId: number
    threadId: number
    createdAt: number
    _all: number
  }


  export type AIModelAssistantAvgAggregateInputType = {
    id?: true
  }

  export type AIModelAssistantSumAggregateInputType = {
    id?: true
  }

  export type AIModelAssistantMinAggregateInputType = {
    id?: true
    assitantId?: true
    threadId?: true
    createdAt?: true
  }

  export type AIModelAssistantMaxAggregateInputType = {
    id?: true
    assitantId?: true
    threadId?: true
    createdAt?: true
  }

  export type AIModelAssistantCountAggregateInputType = {
    id?: true
    assitantId?: true
    threadId?: true
    createdAt?: true
    _all?: true
  }

  export type AIModelAssistantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIModelAssistant to aggregate.
     */
    where?: AIModelAssistantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIModelAssistants to fetch.
     */
    orderBy?: AIModelAssistantOrderByWithRelationInput | AIModelAssistantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIModelAssistantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIModelAssistants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIModelAssistants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIModelAssistants
    **/
    _count?: true | AIModelAssistantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIModelAssistantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIModelAssistantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIModelAssistantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIModelAssistantMaxAggregateInputType
  }

  export type GetAIModelAssistantAggregateType<T extends AIModelAssistantAggregateArgs> = {
        [P in keyof T & keyof AggregateAIModelAssistant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIModelAssistant[P]>
      : GetScalarType<T[P], AggregateAIModelAssistant[P]>
  }




  export type AIModelAssistantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIModelAssistantWhereInput
    orderBy?: AIModelAssistantOrderByWithAggregationInput | AIModelAssistantOrderByWithAggregationInput[]
    by: AIModelAssistantScalarFieldEnum[] | AIModelAssistantScalarFieldEnum
    having?: AIModelAssistantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIModelAssistantCountAggregateInputType | true
    _avg?: AIModelAssistantAvgAggregateInputType
    _sum?: AIModelAssistantSumAggregateInputType
    _min?: AIModelAssistantMinAggregateInputType
    _max?: AIModelAssistantMaxAggregateInputType
  }

  export type AIModelAssistantGroupByOutputType = {
    id: number
    assitantId: string
    threadId: string | null
    createdAt: Date
    _count: AIModelAssistantCountAggregateOutputType | null
    _avg: AIModelAssistantAvgAggregateOutputType | null
    _sum: AIModelAssistantSumAggregateOutputType | null
    _min: AIModelAssistantMinAggregateOutputType | null
    _max: AIModelAssistantMaxAggregateOutputType | null
  }

  type GetAIModelAssistantGroupByPayload<T extends AIModelAssistantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIModelAssistantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIModelAssistantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIModelAssistantGroupByOutputType[P]>
            : GetScalarType<T[P], AIModelAssistantGroupByOutputType[P]>
        }
      >
    >


  export type AIModelAssistantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assitantId?: boolean
    threadId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aIModelAssistant"]>

  export type AIModelAssistantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assitantId?: boolean
    threadId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aIModelAssistant"]>

  export type AIModelAssistantSelectScalar = {
    id?: boolean
    assitantId?: boolean
    threadId?: boolean
    createdAt?: boolean
  }


  export type $AIModelAssistantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIModelAssistant"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      assitantId: string
      threadId: string | null
      createdAt: Date
    }, ExtArgs["result"]["aIModelAssistant"]>
    composites: {}
  }

  type AIModelAssistantGetPayload<S extends boolean | null | undefined | AIModelAssistantDefaultArgs> = $Result.GetResult<Prisma.$AIModelAssistantPayload, S>

  type AIModelAssistantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AIModelAssistantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AIModelAssistantCountAggregateInputType | true
    }

  export interface AIModelAssistantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIModelAssistant'], meta: { name: 'AIModelAssistant' } }
    /**
     * Find zero or one AIModelAssistant that matches the filter.
     * @param {AIModelAssistantFindUniqueArgs} args - Arguments to find a AIModelAssistant
     * @example
     * // Get one AIModelAssistant
     * const aIModelAssistant = await prisma.aIModelAssistant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIModelAssistantFindUniqueArgs>(args: SelectSubset<T, AIModelAssistantFindUniqueArgs<ExtArgs>>): Prisma__AIModelAssistantClient<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AIModelAssistant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AIModelAssistantFindUniqueOrThrowArgs} args - Arguments to find a AIModelAssistant
     * @example
     * // Get one AIModelAssistant
     * const aIModelAssistant = await prisma.aIModelAssistant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIModelAssistantFindUniqueOrThrowArgs>(args: SelectSubset<T, AIModelAssistantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIModelAssistantClient<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AIModelAssistant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIModelAssistantFindFirstArgs} args - Arguments to find a AIModelAssistant
     * @example
     * // Get one AIModelAssistant
     * const aIModelAssistant = await prisma.aIModelAssistant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIModelAssistantFindFirstArgs>(args?: SelectSubset<T, AIModelAssistantFindFirstArgs<ExtArgs>>): Prisma__AIModelAssistantClient<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AIModelAssistant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIModelAssistantFindFirstOrThrowArgs} args - Arguments to find a AIModelAssistant
     * @example
     * // Get one AIModelAssistant
     * const aIModelAssistant = await prisma.aIModelAssistant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIModelAssistantFindFirstOrThrowArgs>(args?: SelectSubset<T, AIModelAssistantFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIModelAssistantClient<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AIModelAssistants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIModelAssistantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIModelAssistants
     * const aIModelAssistants = await prisma.aIModelAssistant.findMany()
     * 
     * // Get first 10 AIModelAssistants
     * const aIModelAssistants = await prisma.aIModelAssistant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIModelAssistantWithIdOnly = await prisma.aIModelAssistant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIModelAssistantFindManyArgs>(args?: SelectSubset<T, AIModelAssistantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AIModelAssistant.
     * @param {AIModelAssistantCreateArgs} args - Arguments to create a AIModelAssistant.
     * @example
     * // Create one AIModelAssistant
     * const AIModelAssistant = await prisma.aIModelAssistant.create({
     *   data: {
     *     // ... data to create a AIModelAssistant
     *   }
     * })
     * 
     */
    create<T extends AIModelAssistantCreateArgs>(args: SelectSubset<T, AIModelAssistantCreateArgs<ExtArgs>>): Prisma__AIModelAssistantClient<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AIModelAssistants.
     * @param {AIModelAssistantCreateManyArgs} args - Arguments to create many AIModelAssistants.
     * @example
     * // Create many AIModelAssistants
     * const aIModelAssistant = await prisma.aIModelAssistant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIModelAssistantCreateManyArgs>(args?: SelectSubset<T, AIModelAssistantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIModelAssistants and returns the data saved in the database.
     * @param {AIModelAssistantCreateManyAndReturnArgs} args - Arguments to create many AIModelAssistants.
     * @example
     * // Create many AIModelAssistants
     * const aIModelAssistant = await prisma.aIModelAssistant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIModelAssistants and only return the `id`
     * const aIModelAssistantWithIdOnly = await prisma.aIModelAssistant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIModelAssistantCreateManyAndReturnArgs>(args?: SelectSubset<T, AIModelAssistantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AIModelAssistant.
     * @param {AIModelAssistantDeleteArgs} args - Arguments to delete one AIModelAssistant.
     * @example
     * // Delete one AIModelAssistant
     * const AIModelAssistant = await prisma.aIModelAssistant.delete({
     *   where: {
     *     // ... filter to delete one AIModelAssistant
     *   }
     * })
     * 
     */
    delete<T extends AIModelAssistantDeleteArgs>(args: SelectSubset<T, AIModelAssistantDeleteArgs<ExtArgs>>): Prisma__AIModelAssistantClient<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AIModelAssistant.
     * @param {AIModelAssistantUpdateArgs} args - Arguments to update one AIModelAssistant.
     * @example
     * // Update one AIModelAssistant
     * const aIModelAssistant = await prisma.aIModelAssistant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIModelAssistantUpdateArgs>(args: SelectSubset<T, AIModelAssistantUpdateArgs<ExtArgs>>): Prisma__AIModelAssistantClient<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AIModelAssistants.
     * @param {AIModelAssistantDeleteManyArgs} args - Arguments to filter AIModelAssistants to delete.
     * @example
     * // Delete a few AIModelAssistants
     * const { count } = await prisma.aIModelAssistant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIModelAssistantDeleteManyArgs>(args?: SelectSubset<T, AIModelAssistantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIModelAssistants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIModelAssistantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIModelAssistants
     * const aIModelAssistant = await prisma.aIModelAssistant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIModelAssistantUpdateManyArgs>(args: SelectSubset<T, AIModelAssistantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AIModelAssistant.
     * @param {AIModelAssistantUpsertArgs} args - Arguments to update or create a AIModelAssistant.
     * @example
     * // Update or create a AIModelAssistant
     * const aIModelAssistant = await prisma.aIModelAssistant.upsert({
     *   create: {
     *     // ... data to create a AIModelAssistant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIModelAssistant we want to update
     *   }
     * })
     */
    upsert<T extends AIModelAssistantUpsertArgs>(args: SelectSubset<T, AIModelAssistantUpsertArgs<ExtArgs>>): Prisma__AIModelAssistantClient<$Result.GetResult<Prisma.$AIModelAssistantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AIModelAssistants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIModelAssistantCountArgs} args - Arguments to filter AIModelAssistants to count.
     * @example
     * // Count the number of AIModelAssistants
     * const count = await prisma.aIModelAssistant.count({
     *   where: {
     *     // ... the filter for the AIModelAssistants we want to count
     *   }
     * })
    **/
    count<T extends AIModelAssistantCountArgs>(
      args?: Subset<T, AIModelAssistantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIModelAssistantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIModelAssistant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIModelAssistantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIModelAssistantAggregateArgs>(args: Subset<T, AIModelAssistantAggregateArgs>): Prisma.PrismaPromise<GetAIModelAssistantAggregateType<T>>

    /**
     * Group by AIModelAssistant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIModelAssistantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIModelAssistantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIModelAssistantGroupByArgs['orderBy'] }
        : { orderBy?: AIModelAssistantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIModelAssistantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIModelAssistantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIModelAssistant model
   */
  readonly fields: AIModelAssistantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIModelAssistant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIModelAssistantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIModelAssistant model
   */ 
  interface AIModelAssistantFieldRefs {
    readonly id: FieldRef<"AIModelAssistant", 'Int'>
    readonly assitantId: FieldRef<"AIModelAssistant", 'String'>
    readonly threadId: FieldRef<"AIModelAssistant", 'String'>
    readonly createdAt: FieldRef<"AIModelAssistant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIModelAssistant findUnique
   */
  export type AIModelAssistantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * Filter, which AIModelAssistant to fetch.
     */
    where: AIModelAssistantWhereUniqueInput
  }

  /**
   * AIModelAssistant findUniqueOrThrow
   */
  export type AIModelAssistantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * Filter, which AIModelAssistant to fetch.
     */
    where: AIModelAssistantWhereUniqueInput
  }

  /**
   * AIModelAssistant findFirst
   */
  export type AIModelAssistantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * Filter, which AIModelAssistant to fetch.
     */
    where?: AIModelAssistantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIModelAssistants to fetch.
     */
    orderBy?: AIModelAssistantOrderByWithRelationInput | AIModelAssistantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIModelAssistants.
     */
    cursor?: AIModelAssistantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIModelAssistants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIModelAssistants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIModelAssistants.
     */
    distinct?: AIModelAssistantScalarFieldEnum | AIModelAssistantScalarFieldEnum[]
  }

  /**
   * AIModelAssistant findFirstOrThrow
   */
  export type AIModelAssistantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * Filter, which AIModelAssistant to fetch.
     */
    where?: AIModelAssistantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIModelAssistants to fetch.
     */
    orderBy?: AIModelAssistantOrderByWithRelationInput | AIModelAssistantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIModelAssistants.
     */
    cursor?: AIModelAssistantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIModelAssistants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIModelAssistants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIModelAssistants.
     */
    distinct?: AIModelAssistantScalarFieldEnum | AIModelAssistantScalarFieldEnum[]
  }

  /**
   * AIModelAssistant findMany
   */
  export type AIModelAssistantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * Filter, which AIModelAssistants to fetch.
     */
    where?: AIModelAssistantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIModelAssistants to fetch.
     */
    orderBy?: AIModelAssistantOrderByWithRelationInput | AIModelAssistantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIModelAssistants.
     */
    cursor?: AIModelAssistantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIModelAssistants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIModelAssistants.
     */
    skip?: number
    distinct?: AIModelAssistantScalarFieldEnum | AIModelAssistantScalarFieldEnum[]
  }

  /**
   * AIModelAssistant create
   */
  export type AIModelAssistantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * The data needed to create a AIModelAssistant.
     */
    data: XOR<AIModelAssistantCreateInput, AIModelAssistantUncheckedCreateInput>
  }

  /**
   * AIModelAssistant createMany
   */
  export type AIModelAssistantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIModelAssistants.
     */
    data: AIModelAssistantCreateManyInput | AIModelAssistantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIModelAssistant createManyAndReturn
   */
  export type AIModelAssistantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AIModelAssistants.
     */
    data: AIModelAssistantCreateManyInput | AIModelAssistantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIModelAssistant update
   */
  export type AIModelAssistantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * The data needed to update a AIModelAssistant.
     */
    data: XOR<AIModelAssistantUpdateInput, AIModelAssistantUncheckedUpdateInput>
    /**
     * Choose, which AIModelAssistant to update.
     */
    where: AIModelAssistantWhereUniqueInput
  }

  /**
   * AIModelAssistant updateMany
   */
  export type AIModelAssistantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIModelAssistants.
     */
    data: XOR<AIModelAssistantUpdateManyMutationInput, AIModelAssistantUncheckedUpdateManyInput>
    /**
     * Filter which AIModelAssistants to update
     */
    where?: AIModelAssistantWhereInput
  }

  /**
   * AIModelAssistant upsert
   */
  export type AIModelAssistantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * The filter to search for the AIModelAssistant to update in case it exists.
     */
    where: AIModelAssistantWhereUniqueInput
    /**
     * In case the AIModelAssistant found by the `where` argument doesn't exist, create a new AIModelAssistant with this data.
     */
    create: XOR<AIModelAssistantCreateInput, AIModelAssistantUncheckedCreateInput>
    /**
     * In case the AIModelAssistant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIModelAssistantUpdateInput, AIModelAssistantUncheckedUpdateInput>
  }

  /**
   * AIModelAssistant delete
   */
  export type AIModelAssistantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
    /**
     * Filter which AIModelAssistant to delete.
     */
    where: AIModelAssistantWhereUniqueInput
  }

  /**
   * AIModelAssistant deleteMany
   */
  export type AIModelAssistantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIModelAssistants to delete
     */
    where?: AIModelAssistantWhereInput
  }

  /**
   * AIModelAssistant without action
   */
  export type AIModelAssistantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIModelAssistant
     */
    select?: AIModelAssistantSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AIDocumentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    framework: 'framework',
    industry: 'industry',
    documentType: 'documentType',
    qualityScore: 'qualityScore',
    wordCount: 'wordCount',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AIDocumentScalarFieldEnum = (typeof AIDocumentScalarFieldEnum)[keyof typeof AIDocumentScalarFieldEnum]


  export const DocumentDataScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    listId: 'listId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type DocumentDataScalarFieldEnum = (typeof DocumentDataScalarFieldEnum)[keyof typeof DocumentDataScalarFieldEnum]


  export const AIDocumentChatScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    message: 'message',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type AIDocumentChatScalarFieldEnum = (typeof AIDocumentChatScalarFieldEnum)[keyof typeof AIDocumentChatScalarFieldEnum]


  export const QuestionCategoryScalarFieldEnum: {
    id: 'id',
    categorytype: 'categorytype',
    createdAt: 'createdAt'
  };

  export type QuestionCategoryScalarFieldEnum = (typeof QuestionCategoryScalarFieldEnum)[keyof typeof QuestionCategoryScalarFieldEnum]


  export const QuestionAnswerScalarFieldEnum: {
    id: 'id',
    answer: 'answer',
    userId: 'userId',
    categoryId: 'categoryId',
    createdAt: 'createdAt'
  };

  export type QuestionAnswerScalarFieldEnum = (typeof QuestionAnswerScalarFieldEnum)[keyof typeof QuestionAnswerScalarFieldEnum]


  export const PromptScalarFieldEnum: {
    id: 'id',
    prompt1: 'prompt1',
    prompt2: 'prompt2',
    prompt3: 'prompt3'
  };

  export type PromptScalarFieldEnum = (typeof PromptScalarFieldEnum)[keyof typeof PromptScalarFieldEnum]


  export const PromptLogsScalarFieldEnum: {
    id: 'id',
    prompt1: 'prompt1',
    prompt2: 'prompt2',
    prompt3: 'prompt3',
    status: 'status'
  };

  export type PromptLogsScalarFieldEnum = (typeof PromptLogsScalarFieldEnum)[keyof typeof PromptLogsScalarFieldEnum]


  export const AIModelAssistantScalarFieldEnum: {
    id: 'id',
    assitantId: 'assitantId',
    threadId: 'threadId',
    createdAt: 'createdAt'
  };

  export type AIModelAssistantScalarFieldEnum = (typeof AIModelAssistantScalarFieldEnum)[keyof typeof AIModelAssistantScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    documents?: AIDocumentListRelationFilter
    answers?: QuestionAnswerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documents?: AIDocumentOrderByRelationAggregateInput
    answers?: QuestionAnswerOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    documents?: AIDocumentListRelationFilter
    answers?: QuestionAnswerListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AIDocumentWhereInput = {
    AND?: AIDocumentWhereInput | AIDocumentWhereInput[]
    OR?: AIDocumentWhereInput[]
    NOT?: AIDocumentWhereInput | AIDocumentWhereInput[]
    id?: IntFilter<"AIDocument"> | number
    title?: StringFilter<"AIDocument"> | string
    content?: StringFilter<"AIDocument"> | string
    framework?: StringFilter<"AIDocument"> | string
    industry?: StringNullableFilter<"AIDocument"> | string | null
    documentType?: StringFilter<"AIDocument"> | string
    qualityScore?: IntNullableFilter<"AIDocument"> | number | null
    wordCount?: IntNullableFilter<"AIDocument"> | number | null
    userId?: IntFilter<"AIDocument"> | number
    createdAt?: DateTimeFilter<"AIDocument"> | Date | string
    updatedAt?: DateTimeFilter<"AIDocument"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    documentData?: DocumentDataListRelationFilter
    documentChat?: AIDocumentChatListRelationFilter
  }

  export type AIDocumentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    framework?: SortOrder
    industry?: SortOrderInput | SortOrder
    documentType?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    wordCount?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    documentData?: DocumentDataOrderByRelationAggregateInput
    documentChat?: AIDocumentChatOrderByRelationAggregateInput
  }

  export type AIDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AIDocumentWhereInput | AIDocumentWhereInput[]
    OR?: AIDocumentWhereInput[]
    NOT?: AIDocumentWhereInput | AIDocumentWhereInput[]
    title?: StringFilter<"AIDocument"> | string
    content?: StringFilter<"AIDocument"> | string
    framework?: StringFilter<"AIDocument"> | string
    industry?: StringNullableFilter<"AIDocument"> | string | null
    documentType?: StringFilter<"AIDocument"> | string
    qualityScore?: IntNullableFilter<"AIDocument"> | number | null
    wordCount?: IntNullableFilter<"AIDocument"> | number | null
    userId?: IntFilter<"AIDocument"> | number
    createdAt?: DateTimeFilter<"AIDocument"> | Date | string
    updatedAt?: DateTimeFilter<"AIDocument"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    documentData?: DocumentDataListRelationFilter
    documentChat?: AIDocumentChatListRelationFilter
  }, "id">

  export type AIDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    framework?: SortOrder
    industry?: SortOrderInput | SortOrder
    documentType?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    wordCount?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AIDocumentCountOrderByAggregateInput
    _avg?: AIDocumentAvgOrderByAggregateInput
    _max?: AIDocumentMaxOrderByAggregateInput
    _min?: AIDocumentMinOrderByAggregateInput
    _sum?: AIDocumentSumOrderByAggregateInput
  }

  export type AIDocumentScalarWhereWithAggregatesInput = {
    AND?: AIDocumentScalarWhereWithAggregatesInput | AIDocumentScalarWhereWithAggregatesInput[]
    OR?: AIDocumentScalarWhereWithAggregatesInput[]
    NOT?: AIDocumentScalarWhereWithAggregatesInput | AIDocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AIDocument"> | number
    title?: StringWithAggregatesFilter<"AIDocument"> | string
    content?: StringWithAggregatesFilter<"AIDocument"> | string
    framework?: StringWithAggregatesFilter<"AIDocument"> | string
    industry?: StringNullableWithAggregatesFilter<"AIDocument"> | string | null
    documentType?: StringWithAggregatesFilter<"AIDocument"> | string
    qualityScore?: IntNullableWithAggregatesFilter<"AIDocument"> | number | null
    wordCount?: IntNullableWithAggregatesFilter<"AIDocument"> | number | null
    userId?: IntWithAggregatesFilter<"AIDocument"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AIDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AIDocument"> | Date | string
  }

  export type DocumentDataWhereInput = {
    AND?: DocumentDataWhereInput | DocumentDataWhereInput[]
    OR?: DocumentDataWhereInput[]
    NOT?: DocumentDataWhereInput | DocumentDataWhereInput[]
    id?: IntFilter<"DocumentData"> | number
    documentId?: IntFilter<"DocumentData"> | number
    listId?: IntNullableFilter<"DocumentData"> | number | null
    content?: StringFilter<"DocumentData"> | string
    createdAt?: DateTimeFilter<"DocumentData"> | Date | string
    document?: XOR<AIDocumentRelationFilter, AIDocumentWhereInput>
  }

  export type DocumentDataOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    listId?: SortOrderInput | SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    document?: AIDocumentOrderByWithRelationInput
  }

  export type DocumentDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentDataWhereInput | DocumentDataWhereInput[]
    OR?: DocumentDataWhereInput[]
    NOT?: DocumentDataWhereInput | DocumentDataWhereInput[]
    documentId?: IntFilter<"DocumentData"> | number
    listId?: IntNullableFilter<"DocumentData"> | number | null
    content?: StringFilter<"DocumentData"> | string
    createdAt?: DateTimeFilter<"DocumentData"> | Date | string
    document?: XOR<AIDocumentRelationFilter, AIDocumentWhereInput>
  }, "id">

  export type DocumentDataOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    listId?: SortOrderInput | SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: DocumentDataCountOrderByAggregateInput
    _avg?: DocumentDataAvgOrderByAggregateInput
    _max?: DocumentDataMaxOrderByAggregateInput
    _min?: DocumentDataMinOrderByAggregateInput
    _sum?: DocumentDataSumOrderByAggregateInput
  }

  export type DocumentDataScalarWhereWithAggregatesInput = {
    AND?: DocumentDataScalarWhereWithAggregatesInput | DocumentDataScalarWhereWithAggregatesInput[]
    OR?: DocumentDataScalarWhereWithAggregatesInput[]
    NOT?: DocumentDataScalarWhereWithAggregatesInput | DocumentDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DocumentData"> | number
    documentId?: IntWithAggregatesFilter<"DocumentData"> | number
    listId?: IntNullableWithAggregatesFilter<"DocumentData"> | number | null
    content?: StringWithAggregatesFilter<"DocumentData"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DocumentData"> | Date | string
  }

  export type AIDocumentChatWhereInput = {
    AND?: AIDocumentChatWhereInput | AIDocumentChatWhereInput[]
    OR?: AIDocumentChatWhereInput[]
    NOT?: AIDocumentChatWhereInput | AIDocumentChatWhereInput[]
    id?: IntFilter<"AIDocumentChat"> | number
    documentId?: IntFilter<"AIDocumentChat"> | number
    message?: StringFilter<"AIDocumentChat"> | string
    role?: StringFilter<"AIDocumentChat"> | string
    createdAt?: DateTimeFilter<"AIDocumentChat"> | Date | string
    document?: XOR<AIDocumentRelationFilter, AIDocumentWhereInput>
  }

  export type AIDocumentChatOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    message?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    document?: AIDocumentOrderByWithRelationInput
  }

  export type AIDocumentChatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AIDocumentChatWhereInput | AIDocumentChatWhereInput[]
    OR?: AIDocumentChatWhereInput[]
    NOT?: AIDocumentChatWhereInput | AIDocumentChatWhereInput[]
    documentId?: IntFilter<"AIDocumentChat"> | number
    message?: StringFilter<"AIDocumentChat"> | string
    role?: StringFilter<"AIDocumentChat"> | string
    createdAt?: DateTimeFilter<"AIDocumentChat"> | Date | string
    document?: XOR<AIDocumentRelationFilter, AIDocumentWhereInput>
  }, "id">

  export type AIDocumentChatOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    message?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: AIDocumentChatCountOrderByAggregateInput
    _avg?: AIDocumentChatAvgOrderByAggregateInput
    _max?: AIDocumentChatMaxOrderByAggregateInput
    _min?: AIDocumentChatMinOrderByAggregateInput
    _sum?: AIDocumentChatSumOrderByAggregateInput
  }

  export type AIDocumentChatScalarWhereWithAggregatesInput = {
    AND?: AIDocumentChatScalarWhereWithAggregatesInput | AIDocumentChatScalarWhereWithAggregatesInput[]
    OR?: AIDocumentChatScalarWhereWithAggregatesInput[]
    NOT?: AIDocumentChatScalarWhereWithAggregatesInput | AIDocumentChatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AIDocumentChat"> | number
    documentId?: IntWithAggregatesFilter<"AIDocumentChat"> | number
    message?: StringWithAggregatesFilter<"AIDocumentChat"> | string
    role?: StringWithAggregatesFilter<"AIDocumentChat"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AIDocumentChat"> | Date | string
  }

  export type QuestionCategoryWhereInput = {
    AND?: QuestionCategoryWhereInput | QuestionCategoryWhereInput[]
    OR?: QuestionCategoryWhereInput[]
    NOT?: QuestionCategoryWhereInput | QuestionCategoryWhereInput[]
    id?: IntFilter<"QuestionCategory"> | number
    categorytype?: StringFilter<"QuestionCategory"> | string
    createdAt?: DateTimeFilter<"QuestionCategory"> | Date | string
    answers?: QuestionAnswerListRelationFilter
  }

  export type QuestionCategoryOrderByWithRelationInput = {
    id?: SortOrder
    categorytype?: SortOrder
    createdAt?: SortOrder
    answers?: QuestionAnswerOrderByRelationAggregateInput
  }

  export type QuestionCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    categorytype?: string
    AND?: QuestionCategoryWhereInput | QuestionCategoryWhereInput[]
    OR?: QuestionCategoryWhereInput[]
    NOT?: QuestionCategoryWhereInput | QuestionCategoryWhereInput[]
    createdAt?: DateTimeFilter<"QuestionCategory"> | Date | string
    answers?: QuestionAnswerListRelationFilter
  }, "id" | "categorytype">

  export type QuestionCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    categorytype?: SortOrder
    createdAt?: SortOrder
    _count?: QuestionCategoryCountOrderByAggregateInput
    _avg?: QuestionCategoryAvgOrderByAggregateInput
    _max?: QuestionCategoryMaxOrderByAggregateInput
    _min?: QuestionCategoryMinOrderByAggregateInput
    _sum?: QuestionCategorySumOrderByAggregateInput
  }

  export type QuestionCategoryScalarWhereWithAggregatesInput = {
    AND?: QuestionCategoryScalarWhereWithAggregatesInput | QuestionCategoryScalarWhereWithAggregatesInput[]
    OR?: QuestionCategoryScalarWhereWithAggregatesInput[]
    NOT?: QuestionCategoryScalarWhereWithAggregatesInput | QuestionCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionCategory"> | number
    categorytype?: StringWithAggregatesFilter<"QuestionCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"QuestionCategory"> | Date | string
  }

  export type QuestionAnswerWhereInput = {
    AND?: QuestionAnswerWhereInput | QuestionAnswerWhereInput[]
    OR?: QuestionAnswerWhereInput[]
    NOT?: QuestionAnswerWhereInput | QuestionAnswerWhereInput[]
    id?: IntFilter<"QuestionAnswer"> | number
    answer?: StringFilter<"QuestionAnswer"> | string
    userId?: IntFilter<"QuestionAnswer"> | number
    categoryId?: IntFilter<"QuestionAnswer"> | number
    createdAt?: DateTimeFilter<"QuestionAnswer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<QuestionCategoryRelationFilter, QuestionCategoryWhereInput>
  }

  export type QuestionAnswerOrderByWithRelationInput = {
    id?: SortOrder
    answer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    category?: QuestionCategoryOrderByWithRelationInput
  }

  export type QuestionAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionAnswerWhereInput | QuestionAnswerWhereInput[]
    OR?: QuestionAnswerWhereInput[]
    NOT?: QuestionAnswerWhereInput | QuestionAnswerWhereInput[]
    answer?: StringFilter<"QuestionAnswer"> | string
    userId?: IntFilter<"QuestionAnswer"> | number
    categoryId?: IntFilter<"QuestionAnswer"> | number
    createdAt?: DateTimeFilter<"QuestionAnswer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<QuestionCategoryRelationFilter, QuestionCategoryWhereInput>
  }, "id">

  export type QuestionAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    answer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    _count?: QuestionAnswerCountOrderByAggregateInput
    _avg?: QuestionAnswerAvgOrderByAggregateInput
    _max?: QuestionAnswerMaxOrderByAggregateInput
    _min?: QuestionAnswerMinOrderByAggregateInput
    _sum?: QuestionAnswerSumOrderByAggregateInput
  }

  export type QuestionAnswerScalarWhereWithAggregatesInput = {
    AND?: QuestionAnswerScalarWhereWithAggregatesInput | QuestionAnswerScalarWhereWithAggregatesInput[]
    OR?: QuestionAnswerScalarWhereWithAggregatesInput[]
    NOT?: QuestionAnswerScalarWhereWithAggregatesInput | QuestionAnswerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionAnswer"> | number
    answer?: StringWithAggregatesFilter<"QuestionAnswer"> | string
    userId?: IntWithAggregatesFilter<"QuestionAnswer"> | number
    categoryId?: IntWithAggregatesFilter<"QuestionAnswer"> | number
    createdAt?: DateTimeWithAggregatesFilter<"QuestionAnswer"> | Date | string
  }

  export type PromptWhereInput = {
    AND?: PromptWhereInput | PromptWhereInput[]
    OR?: PromptWhereInput[]
    NOT?: PromptWhereInput | PromptWhereInput[]
    id?: IntFilter<"Prompt"> | number
    prompt1?: StringFilter<"Prompt"> | string
    prompt2?: StringNullableFilter<"Prompt"> | string | null
    prompt3?: StringNullableFilter<"Prompt"> | string | null
  }

  export type PromptOrderByWithRelationInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrderInput | SortOrder
    prompt3?: SortOrderInput | SortOrder
  }

  export type PromptWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PromptWhereInput | PromptWhereInput[]
    OR?: PromptWhereInput[]
    NOT?: PromptWhereInput | PromptWhereInput[]
    prompt1?: StringFilter<"Prompt"> | string
    prompt2?: StringNullableFilter<"Prompt"> | string | null
    prompt3?: StringNullableFilter<"Prompt"> | string | null
  }, "id">

  export type PromptOrderByWithAggregationInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrderInput | SortOrder
    prompt3?: SortOrderInput | SortOrder
    _count?: PromptCountOrderByAggregateInput
    _avg?: PromptAvgOrderByAggregateInput
    _max?: PromptMaxOrderByAggregateInput
    _min?: PromptMinOrderByAggregateInput
    _sum?: PromptSumOrderByAggregateInput
  }

  export type PromptScalarWhereWithAggregatesInput = {
    AND?: PromptScalarWhereWithAggregatesInput | PromptScalarWhereWithAggregatesInput[]
    OR?: PromptScalarWhereWithAggregatesInput[]
    NOT?: PromptScalarWhereWithAggregatesInput | PromptScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Prompt"> | number
    prompt1?: StringWithAggregatesFilter<"Prompt"> | string
    prompt2?: StringNullableWithAggregatesFilter<"Prompt"> | string | null
    prompt3?: StringNullableWithAggregatesFilter<"Prompt"> | string | null
  }

  export type PromptLogsWhereInput = {
    AND?: PromptLogsWhereInput | PromptLogsWhereInput[]
    OR?: PromptLogsWhereInput[]
    NOT?: PromptLogsWhereInput | PromptLogsWhereInput[]
    id?: IntFilter<"PromptLogs"> | number
    prompt1?: StringFilter<"PromptLogs"> | string
    prompt2?: StringNullableFilter<"PromptLogs"> | string | null
    prompt3?: StringNullableFilter<"PromptLogs"> | string | null
    status?: BoolFilter<"PromptLogs"> | boolean
  }

  export type PromptLogsOrderByWithRelationInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrderInput | SortOrder
    prompt3?: SortOrderInput | SortOrder
    status?: SortOrder
  }

  export type PromptLogsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PromptLogsWhereInput | PromptLogsWhereInput[]
    OR?: PromptLogsWhereInput[]
    NOT?: PromptLogsWhereInput | PromptLogsWhereInput[]
    prompt1?: StringFilter<"PromptLogs"> | string
    prompt2?: StringNullableFilter<"PromptLogs"> | string | null
    prompt3?: StringNullableFilter<"PromptLogs"> | string | null
    status?: BoolFilter<"PromptLogs"> | boolean
  }, "id">

  export type PromptLogsOrderByWithAggregationInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrderInput | SortOrder
    prompt3?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: PromptLogsCountOrderByAggregateInput
    _avg?: PromptLogsAvgOrderByAggregateInput
    _max?: PromptLogsMaxOrderByAggregateInput
    _min?: PromptLogsMinOrderByAggregateInput
    _sum?: PromptLogsSumOrderByAggregateInput
  }

  export type PromptLogsScalarWhereWithAggregatesInput = {
    AND?: PromptLogsScalarWhereWithAggregatesInput | PromptLogsScalarWhereWithAggregatesInput[]
    OR?: PromptLogsScalarWhereWithAggregatesInput[]
    NOT?: PromptLogsScalarWhereWithAggregatesInput | PromptLogsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PromptLogs"> | number
    prompt1?: StringWithAggregatesFilter<"PromptLogs"> | string
    prompt2?: StringNullableWithAggregatesFilter<"PromptLogs"> | string | null
    prompt3?: StringNullableWithAggregatesFilter<"PromptLogs"> | string | null
    status?: BoolWithAggregatesFilter<"PromptLogs"> | boolean
  }

  export type AIModelAssistantWhereInput = {
    AND?: AIModelAssistantWhereInput | AIModelAssistantWhereInput[]
    OR?: AIModelAssistantWhereInput[]
    NOT?: AIModelAssistantWhereInput | AIModelAssistantWhereInput[]
    id?: IntFilter<"AIModelAssistant"> | number
    assitantId?: StringFilter<"AIModelAssistant"> | string
    threadId?: StringNullableFilter<"AIModelAssistant"> | string | null
    createdAt?: DateTimeFilter<"AIModelAssistant"> | Date | string
  }

  export type AIModelAssistantOrderByWithRelationInput = {
    id?: SortOrder
    assitantId?: SortOrder
    threadId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AIModelAssistantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    assitantId?: string
    AND?: AIModelAssistantWhereInput | AIModelAssistantWhereInput[]
    OR?: AIModelAssistantWhereInput[]
    NOT?: AIModelAssistantWhereInput | AIModelAssistantWhereInput[]
    threadId?: StringNullableFilter<"AIModelAssistant"> | string | null
    createdAt?: DateTimeFilter<"AIModelAssistant"> | Date | string
  }, "id" | "assitantId">

  export type AIModelAssistantOrderByWithAggregationInput = {
    id?: SortOrder
    assitantId?: SortOrder
    threadId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AIModelAssistantCountOrderByAggregateInput
    _avg?: AIModelAssistantAvgOrderByAggregateInput
    _max?: AIModelAssistantMaxOrderByAggregateInput
    _min?: AIModelAssistantMinOrderByAggregateInput
    _sum?: AIModelAssistantSumOrderByAggregateInput
  }

  export type AIModelAssistantScalarWhereWithAggregatesInput = {
    AND?: AIModelAssistantScalarWhereWithAggregatesInput | AIModelAssistantScalarWhereWithAggregatesInput[]
    OR?: AIModelAssistantScalarWhereWithAggregatesInput[]
    NOT?: AIModelAssistantScalarWhereWithAggregatesInput | AIModelAssistantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AIModelAssistant"> | number
    assitantId?: StringWithAggregatesFilter<"AIModelAssistant"> | string
    threadId?: StringNullableWithAggregatesFilter<"AIModelAssistant"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AIModelAssistant"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: AIDocumentCreateNestedManyWithoutUserInput
    answers?: QuestionAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: AIDocumentUncheckedCreateNestedManyWithoutUserInput
    answers?: QuestionAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: AIDocumentUpdateManyWithoutUserNestedInput
    answers?: QuestionAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: AIDocumentUncheckedUpdateManyWithoutUserNestedInput
    answers?: QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentCreateInput = {
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
    documentData?: DocumentDataCreateNestedManyWithoutDocumentInput
    documentChat?: AIDocumentChatCreateNestedManyWithoutDocumentInput
  }

  export type AIDocumentUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    documentData?: DocumentDataUncheckedCreateNestedManyWithoutDocumentInput
    documentChat?: AIDocumentChatUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type AIDocumentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
    documentData?: DocumentDataUpdateManyWithoutDocumentNestedInput
    documentChat?: AIDocumentChatUpdateManyWithoutDocumentNestedInput
  }

  export type AIDocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentData?: DocumentDataUncheckedUpdateManyWithoutDocumentNestedInput
    documentChat?: AIDocumentChatUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type AIDocumentCreateManyInput = {
    id?: number
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIDocumentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentDataCreateInput = {
    listId?: number | null
    content: string
    createdAt?: Date | string
    document: AIDocumentCreateNestedOneWithoutDocumentDataInput
  }

  export type DocumentDataUncheckedCreateInput = {
    id?: number
    documentId: number
    listId?: number | null
    content: string
    createdAt?: Date | string
  }

  export type DocumentDataUpdateInput = {
    listId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: AIDocumentUpdateOneRequiredWithoutDocumentDataNestedInput
  }

  export type DocumentDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    listId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentDataCreateManyInput = {
    id?: number
    documentId: number
    listId?: number | null
    content: string
    createdAt?: Date | string
  }

  export type DocumentDataUpdateManyMutationInput = {
    listId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    listId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentChatCreateInput = {
    message: string
    role: string
    createdAt?: Date | string
    document: AIDocumentCreateNestedOneWithoutDocumentChatInput
  }

  export type AIDocumentChatUncheckedCreateInput = {
    id?: number
    documentId: number
    message: string
    role: string
    createdAt?: Date | string
  }

  export type AIDocumentChatUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: AIDocumentUpdateOneRequiredWithoutDocumentChatNestedInput
  }

  export type AIDocumentChatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentChatCreateManyInput = {
    id?: number
    documentId: number
    message: string
    role: string
    createdAt?: Date | string
  }

  export type AIDocumentChatUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentChatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCategoryCreateInput = {
    categorytype: string
    createdAt?: Date | string
    answers?: QuestionAnswerCreateNestedManyWithoutCategoryInput
  }

  export type QuestionCategoryUncheckedCreateInput = {
    id?: number
    categorytype: string
    createdAt?: Date | string
    answers?: QuestionAnswerUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type QuestionCategoryUpdateInput = {
    categorytype?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: QuestionAnswerUpdateManyWithoutCategoryNestedInput
  }

  export type QuestionCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categorytype?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: QuestionAnswerUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type QuestionCategoryCreateManyInput = {
    id?: number
    categorytype: string
    createdAt?: Date | string
  }

  export type QuestionCategoryUpdateManyMutationInput = {
    categorytype?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categorytype?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAnswerCreateInput = {
    answer: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAnswersInput
    category: QuestionCategoryCreateNestedOneWithoutAnswersInput
  }

  export type QuestionAnswerUncheckedCreateInput = {
    id?: number
    answer: string
    userId: number
    categoryId: number
    createdAt?: Date | string
  }

  export type QuestionAnswerUpdateInput = {
    answer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnswersNestedInput
    category?: QuestionCategoryUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type QuestionAnswerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAnswerCreateManyInput = {
    id?: number
    answer: string
    userId: number
    categoryId: number
    createdAt?: Date | string
  }

  export type QuestionAnswerUpdateManyMutationInput = {
    answer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAnswerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromptCreateInput = {
    prompt1: string
    prompt2?: string | null
    prompt3?: string | null
  }

  export type PromptUncheckedCreateInput = {
    id?: number
    prompt1: string
    prompt2?: string | null
    prompt3?: string | null
  }

  export type PromptUpdateInput = {
    prompt1?: StringFieldUpdateOperationsInput | string
    prompt2?: NullableStringFieldUpdateOperationsInput | string | null
    prompt3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    prompt1?: StringFieldUpdateOperationsInput | string
    prompt2?: NullableStringFieldUpdateOperationsInput | string | null
    prompt3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptCreateManyInput = {
    id?: number
    prompt1: string
    prompt2?: string | null
    prompt3?: string | null
  }

  export type PromptUpdateManyMutationInput = {
    prompt1?: StringFieldUpdateOperationsInput | string
    prompt2?: NullableStringFieldUpdateOperationsInput | string | null
    prompt3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    prompt1?: StringFieldUpdateOperationsInput | string
    prompt2?: NullableStringFieldUpdateOperationsInput | string | null
    prompt3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptLogsCreateInput = {
    prompt1: string
    prompt2?: string | null
    prompt3?: string | null
    status?: boolean
  }

  export type PromptLogsUncheckedCreateInput = {
    id?: number
    prompt1: string
    prompt2?: string | null
    prompt3?: string | null
    status?: boolean
  }

  export type PromptLogsUpdateInput = {
    prompt1?: StringFieldUpdateOperationsInput | string
    prompt2?: NullableStringFieldUpdateOperationsInput | string | null
    prompt3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PromptLogsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    prompt1?: StringFieldUpdateOperationsInput | string
    prompt2?: NullableStringFieldUpdateOperationsInput | string | null
    prompt3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PromptLogsCreateManyInput = {
    id?: number
    prompt1: string
    prompt2?: string | null
    prompt3?: string | null
    status?: boolean
  }

  export type PromptLogsUpdateManyMutationInput = {
    prompt1?: StringFieldUpdateOperationsInput | string
    prompt2?: NullableStringFieldUpdateOperationsInput | string | null
    prompt3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PromptLogsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    prompt1?: StringFieldUpdateOperationsInput | string
    prompt2?: NullableStringFieldUpdateOperationsInput | string | null
    prompt3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AIModelAssistantCreateInput = {
    assitantId: string
    threadId?: string | null
    createdAt?: Date | string
  }

  export type AIModelAssistantUncheckedCreateInput = {
    id?: number
    assitantId: string
    threadId?: string | null
    createdAt?: Date | string
  }

  export type AIModelAssistantUpdateInput = {
    assitantId?: StringFieldUpdateOperationsInput | string
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIModelAssistantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    assitantId?: StringFieldUpdateOperationsInput | string
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIModelAssistantCreateManyInput = {
    id?: number
    assitantId: string
    threadId?: string | null
    createdAt?: Date | string
  }

  export type AIModelAssistantUpdateManyMutationInput = {
    assitantId?: StringFieldUpdateOperationsInput | string
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIModelAssistantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    assitantId?: StringFieldUpdateOperationsInput | string
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AIDocumentListRelationFilter = {
    every?: AIDocumentWhereInput
    some?: AIDocumentWhereInput
    none?: AIDocumentWhereInput
  }

  export type QuestionAnswerListRelationFilter = {
    every?: QuestionAnswerWhereInput
    some?: QuestionAnswerWhereInput
    none?: QuestionAnswerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AIDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DocumentDataListRelationFilter = {
    every?: DocumentDataWhereInput
    some?: DocumentDataWhereInput
    none?: DocumentDataWhereInput
  }

  export type AIDocumentChatListRelationFilter = {
    every?: AIDocumentChatWhereInput
    some?: AIDocumentChatWhereInput
    none?: AIDocumentChatWhereInput
  }

  export type DocumentDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AIDocumentChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AIDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    framework?: SortOrder
    industry?: SortOrder
    documentType?: SortOrder
    qualityScore?: SortOrder
    wordCount?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIDocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    qualityScore?: SortOrder
    wordCount?: SortOrder
    userId?: SortOrder
  }

  export type AIDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    framework?: SortOrder
    industry?: SortOrder
    documentType?: SortOrder
    qualityScore?: SortOrder
    wordCount?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    framework?: SortOrder
    industry?: SortOrder
    documentType?: SortOrder
    qualityScore?: SortOrder
    wordCount?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIDocumentSumOrderByAggregateInput = {
    id?: SortOrder
    qualityScore?: SortOrder
    wordCount?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AIDocumentRelationFilter = {
    is?: AIDocumentWhereInput
    isNot?: AIDocumentWhereInput
  }

  export type DocumentDataCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    listId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type DocumentDataAvgOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    listId?: SortOrder
  }

  export type DocumentDataMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    listId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type DocumentDataMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    listId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type DocumentDataSumOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    listId?: SortOrder
  }

  export type AIDocumentChatCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    message?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type AIDocumentChatAvgOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
  }

  export type AIDocumentChatMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    message?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type AIDocumentChatMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    message?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type AIDocumentChatSumOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
  }

  export type QuestionCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    categorytype?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    categorytype?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    categorytype?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionCategoryRelationFilter = {
    is?: QuestionCategoryWhereInput
    isNot?: QuestionCategoryWhereInput
  }

  export type QuestionAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionAnswerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type QuestionAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionAnswerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type PromptCountOrderByAggregateInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrder
    prompt3?: SortOrder
  }

  export type PromptAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PromptMaxOrderByAggregateInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrder
    prompt3?: SortOrder
  }

  export type PromptMinOrderByAggregateInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrder
    prompt3?: SortOrder
  }

  export type PromptSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PromptLogsCountOrderByAggregateInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrder
    prompt3?: SortOrder
    status?: SortOrder
  }

  export type PromptLogsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PromptLogsMaxOrderByAggregateInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrder
    prompt3?: SortOrder
    status?: SortOrder
  }

  export type PromptLogsMinOrderByAggregateInput = {
    id?: SortOrder
    prompt1?: SortOrder
    prompt2?: SortOrder
    prompt3?: SortOrder
    status?: SortOrder
  }

  export type PromptLogsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AIModelAssistantCountOrderByAggregateInput = {
    id?: SortOrder
    assitantId?: SortOrder
    threadId?: SortOrder
    createdAt?: SortOrder
  }

  export type AIModelAssistantAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AIModelAssistantMaxOrderByAggregateInput = {
    id?: SortOrder
    assitantId?: SortOrder
    threadId?: SortOrder
    createdAt?: SortOrder
  }

  export type AIModelAssistantMinOrderByAggregateInput = {
    id?: SortOrder
    assitantId?: SortOrder
    threadId?: SortOrder
    createdAt?: SortOrder
  }

  export type AIModelAssistantSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AIDocumentCreateNestedManyWithoutUserInput = {
    create?: XOR<AIDocumentCreateWithoutUserInput, AIDocumentUncheckedCreateWithoutUserInput> | AIDocumentCreateWithoutUserInput[] | AIDocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIDocumentCreateOrConnectWithoutUserInput | AIDocumentCreateOrConnectWithoutUserInput[]
    createMany?: AIDocumentCreateManyUserInputEnvelope
    connect?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
  }

  export type QuestionAnswerCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput> | QuestionAnswerCreateWithoutUserInput[] | QuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutUserInput | QuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: QuestionAnswerCreateManyUserInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type AIDocumentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AIDocumentCreateWithoutUserInput, AIDocumentUncheckedCreateWithoutUserInput> | AIDocumentCreateWithoutUserInput[] | AIDocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIDocumentCreateOrConnectWithoutUserInput | AIDocumentCreateOrConnectWithoutUserInput[]
    createMany?: AIDocumentCreateManyUserInputEnvelope
    connect?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
  }

  export type QuestionAnswerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput> | QuestionAnswerCreateWithoutUserInput[] | QuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutUserInput | QuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: QuestionAnswerCreateManyUserInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AIDocumentUpdateManyWithoutUserNestedInput = {
    create?: XOR<AIDocumentCreateWithoutUserInput, AIDocumentUncheckedCreateWithoutUserInput> | AIDocumentCreateWithoutUserInput[] | AIDocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIDocumentCreateOrConnectWithoutUserInput | AIDocumentCreateOrConnectWithoutUserInput[]
    upsert?: AIDocumentUpsertWithWhereUniqueWithoutUserInput | AIDocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AIDocumentCreateManyUserInputEnvelope
    set?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
    disconnect?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
    delete?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
    connect?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
    update?: AIDocumentUpdateWithWhereUniqueWithoutUserInput | AIDocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AIDocumentUpdateManyWithWhereWithoutUserInput | AIDocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AIDocumentScalarWhereInput | AIDocumentScalarWhereInput[]
  }

  export type QuestionAnswerUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput> | QuestionAnswerCreateWithoutUserInput[] | QuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutUserInput | QuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutUserInput | QuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionAnswerCreateManyUserInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutUserInput | QuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutUserInput | QuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AIDocumentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AIDocumentCreateWithoutUserInput, AIDocumentUncheckedCreateWithoutUserInput> | AIDocumentCreateWithoutUserInput[] | AIDocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIDocumentCreateOrConnectWithoutUserInput | AIDocumentCreateOrConnectWithoutUserInput[]
    upsert?: AIDocumentUpsertWithWhereUniqueWithoutUserInput | AIDocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AIDocumentCreateManyUserInputEnvelope
    set?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
    disconnect?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
    delete?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
    connect?: AIDocumentWhereUniqueInput | AIDocumentWhereUniqueInput[]
    update?: AIDocumentUpdateWithWhereUniqueWithoutUserInput | AIDocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AIDocumentUpdateManyWithWhereWithoutUserInput | AIDocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AIDocumentScalarWhereInput | AIDocumentScalarWhereInput[]
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput> | QuestionAnswerCreateWithoutUserInput[] | QuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutUserInput | QuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutUserInput | QuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionAnswerCreateManyUserInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutUserInput | QuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutUserInput | QuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentDataCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentDataCreateWithoutDocumentInput, DocumentDataUncheckedCreateWithoutDocumentInput> | DocumentDataCreateWithoutDocumentInput[] | DocumentDataUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentDataCreateOrConnectWithoutDocumentInput | DocumentDataCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentDataCreateManyDocumentInputEnvelope
    connect?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
  }

  export type AIDocumentChatCreateNestedManyWithoutDocumentInput = {
    create?: XOR<AIDocumentChatCreateWithoutDocumentInput, AIDocumentChatUncheckedCreateWithoutDocumentInput> | AIDocumentChatCreateWithoutDocumentInput[] | AIDocumentChatUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: AIDocumentChatCreateOrConnectWithoutDocumentInput | AIDocumentChatCreateOrConnectWithoutDocumentInput[]
    createMany?: AIDocumentChatCreateManyDocumentInputEnvelope
    connect?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
  }

  export type DocumentDataUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentDataCreateWithoutDocumentInput, DocumentDataUncheckedCreateWithoutDocumentInput> | DocumentDataCreateWithoutDocumentInput[] | DocumentDataUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentDataCreateOrConnectWithoutDocumentInput | DocumentDataCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentDataCreateManyDocumentInputEnvelope
    connect?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
  }

  export type AIDocumentChatUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<AIDocumentChatCreateWithoutDocumentInput, AIDocumentChatUncheckedCreateWithoutDocumentInput> | AIDocumentChatCreateWithoutDocumentInput[] | AIDocumentChatUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: AIDocumentChatCreateOrConnectWithoutDocumentInput | AIDocumentChatCreateOrConnectWithoutDocumentInput[]
    createMany?: AIDocumentChatCreateManyDocumentInputEnvelope
    connect?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentDataUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentDataCreateWithoutDocumentInput, DocumentDataUncheckedCreateWithoutDocumentInput> | DocumentDataCreateWithoutDocumentInput[] | DocumentDataUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentDataCreateOrConnectWithoutDocumentInput | DocumentDataCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentDataUpsertWithWhereUniqueWithoutDocumentInput | DocumentDataUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentDataCreateManyDocumentInputEnvelope
    set?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
    disconnect?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
    delete?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
    connect?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
    update?: DocumentDataUpdateWithWhereUniqueWithoutDocumentInput | DocumentDataUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentDataUpdateManyWithWhereWithoutDocumentInput | DocumentDataUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentDataScalarWhereInput | DocumentDataScalarWhereInput[]
  }

  export type AIDocumentChatUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<AIDocumentChatCreateWithoutDocumentInput, AIDocumentChatUncheckedCreateWithoutDocumentInput> | AIDocumentChatCreateWithoutDocumentInput[] | AIDocumentChatUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: AIDocumentChatCreateOrConnectWithoutDocumentInput | AIDocumentChatCreateOrConnectWithoutDocumentInput[]
    upsert?: AIDocumentChatUpsertWithWhereUniqueWithoutDocumentInput | AIDocumentChatUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: AIDocumentChatCreateManyDocumentInputEnvelope
    set?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
    disconnect?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
    delete?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
    connect?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
    update?: AIDocumentChatUpdateWithWhereUniqueWithoutDocumentInput | AIDocumentChatUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: AIDocumentChatUpdateManyWithWhereWithoutDocumentInput | AIDocumentChatUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: AIDocumentChatScalarWhereInput | AIDocumentChatScalarWhereInput[]
  }

  export type DocumentDataUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentDataCreateWithoutDocumentInput, DocumentDataUncheckedCreateWithoutDocumentInput> | DocumentDataCreateWithoutDocumentInput[] | DocumentDataUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentDataCreateOrConnectWithoutDocumentInput | DocumentDataCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentDataUpsertWithWhereUniqueWithoutDocumentInput | DocumentDataUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentDataCreateManyDocumentInputEnvelope
    set?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
    disconnect?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
    delete?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
    connect?: DocumentDataWhereUniqueInput | DocumentDataWhereUniqueInput[]
    update?: DocumentDataUpdateWithWhereUniqueWithoutDocumentInput | DocumentDataUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentDataUpdateManyWithWhereWithoutDocumentInput | DocumentDataUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentDataScalarWhereInput | DocumentDataScalarWhereInput[]
  }

  export type AIDocumentChatUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<AIDocumentChatCreateWithoutDocumentInput, AIDocumentChatUncheckedCreateWithoutDocumentInput> | AIDocumentChatCreateWithoutDocumentInput[] | AIDocumentChatUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: AIDocumentChatCreateOrConnectWithoutDocumentInput | AIDocumentChatCreateOrConnectWithoutDocumentInput[]
    upsert?: AIDocumentChatUpsertWithWhereUniqueWithoutDocumentInput | AIDocumentChatUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: AIDocumentChatCreateManyDocumentInputEnvelope
    set?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
    disconnect?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
    delete?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
    connect?: AIDocumentChatWhereUniqueInput | AIDocumentChatWhereUniqueInput[]
    update?: AIDocumentChatUpdateWithWhereUniqueWithoutDocumentInput | AIDocumentChatUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: AIDocumentChatUpdateManyWithWhereWithoutDocumentInput | AIDocumentChatUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: AIDocumentChatScalarWhereInput | AIDocumentChatScalarWhereInput[]
  }

  export type AIDocumentCreateNestedOneWithoutDocumentDataInput = {
    create?: XOR<AIDocumentCreateWithoutDocumentDataInput, AIDocumentUncheckedCreateWithoutDocumentDataInput>
    connectOrCreate?: AIDocumentCreateOrConnectWithoutDocumentDataInput
    connect?: AIDocumentWhereUniqueInput
  }

  export type AIDocumentUpdateOneRequiredWithoutDocumentDataNestedInput = {
    create?: XOR<AIDocumentCreateWithoutDocumentDataInput, AIDocumentUncheckedCreateWithoutDocumentDataInput>
    connectOrCreate?: AIDocumentCreateOrConnectWithoutDocumentDataInput
    upsert?: AIDocumentUpsertWithoutDocumentDataInput
    connect?: AIDocumentWhereUniqueInput
    update?: XOR<XOR<AIDocumentUpdateToOneWithWhereWithoutDocumentDataInput, AIDocumentUpdateWithoutDocumentDataInput>, AIDocumentUncheckedUpdateWithoutDocumentDataInput>
  }

  export type AIDocumentCreateNestedOneWithoutDocumentChatInput = {
    create?: XOR<AIDocumentCreateWithoutDocumentChatInput, AIDocumentUncheckedCreateWithoutDocumentChatInput>
    connectOrCreate?: AIDocumentCreateOrConnectWithoutDocumentChatInput
    connect?: AIDocumentWhereUniqueInput
  }

  export type AIDocumentUpdateOneRequiredWithoutDocumentChatNestedInput = {
    create?: XOR<AIDocumentCreateWithoutDocumentChatInput, AIDocumentUncheckedCreateWithoutDocumentChatInput>
    connectOrCreate?: AIDocumentCreateOrConnectWithoutDocumentChatInput
    upsert?: AIDocumentUpsertWithoutDocumentChatInput
    connect?: AIDocumentWhereUniqueInput
    update?: XOR<XOR<AIDocumentUpdateToOneWithWhereWithoutDocumentChatInput, AIDocumentUpdateWithoutDocumentChatInput>, AIDocumentUncheckedUpdateWithoutDocumentChatInput>
  }

  export type QuestionAnswerCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuestionAnswerCreateWithoutCategoryInput, QuestionAnswerUncheckedCreateWithoutCategoryInput> | QuestionAnswerCreateWithoutCategoryInput[] | QuestionAnswerUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutCategoryInput | QuestionAnswerCreateOrConnectWithoutCategoryInput[]
    createMany?: QuestionAnswerCreateManyCategoryInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type QuestionAnswerUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuestionAnswerCreateWithoutCategoryInput, QuestionAnswerUncheckedCreateWithoutCategoryInput> | QuestionAnswerCreateWithoutCategoryInput[] | QuestionAnswerUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutCategoryInput | QuestionAnswerCreateOrConnectWithoutCategoryInput[]
    createMany?: QuestionAnswerCreateManyCategoryInputEnvelope
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
  }

  export type QuestionAnswerUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutCategoryInput, QuestionAnswerUncheckedCreateWithoutCategoryInput> | QuestionAnswerCreateWithoutCategoryInput[] | QuestionAnswerUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutCategoryInput | QuestionAnswerCreateOrConnectWithoutCategoryInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutCategoryInput | QuestionAnswerUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuestionAnswerCreateManyCategoryInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutCategoryInput | QuestionAnswerUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutCategoryInput | QuestionAnswerUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuestionAnswerCreateWithoutCategoryInput, QuestionAnswerUncheckedCreateWithoutCategoryInput> | QuestionAnswerCreateWithoutCategoryInput[] | QuestionAnswerUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionAnswerCreateOrConnectWithoutCategoryInput | QuestionAnswerCreateOrConnectWithoutCategoryInput[]
    upsert?: QuestionAnswerUpsertWithWhereUniqueWithoutCategoryInput | QuestionAnswerUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuestionAnswerCreateManyCategoryInputEnvelope
    set?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    disconnect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    delete?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    connect?: QuestionAnswerWhereUniqueInput | QuestionAnswerWhereUniqueInput[]
    update?: QuestionAnswerUpdateWithWhereUniqueWithoutCategoryInput | QuestionAnswerUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuestionAnswerUpdateManyWithWhereWithoutCategoryInput | QuestionAnswerUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAnswersInput = {
    create?: XOR<UserCreateWithoutAnswersInput, UserUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnswersInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionCategoryCreateNestedOneWithoutAnswersInput = {
    create?: XOR<QuestionCategoryCreateWithoutAnswersInput, QuestionCategoryUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCategoryCreateOrConnectWithoutAnswersInput
    connect?: QuestionCategoryWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<UserCreateWithoutAnswersInput, UserUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnswersInput
    upsert?: UserUpsertWithoutAnswersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnswersInput, UserUpdateWithoutAnswersInput>, UserUncheckedUpdateWithoutAnswersInput>
  }

  export type QuestionCategoryUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<QuestionCategoryCreateWithoutAnswersInput, QuestionCategoryUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCategoryCreateOrConnectWithoutAnswersInput
    upsert?: QuestionCategoryUpsertWithoutAnswersInput
    connect?: QuestionCategoryWhereUniqueInput
    update?: XOR<XOR<QuestionCategoryUpdateToOneWithWhereWithoutAnswersInput, QuestionCategoryUpdateWithoutAnswersInput>, QuestionCategoryUncheckedUpdateWithoutAnswersInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AIDocumentCreateWithoutUserInput = {
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documentData?: DocumentDataCreateNestedManyWithoutDocumentInput
    documentChat?: AIDocumentChatCreateNestedManyWithoutDocumentInput
  }

  export type AIDocumentUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documentData?: DocumentDataUncheckedCreateNestedManyWithoutDocumentInput
    documentChat?: AIDocumentChatUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type AIDocumentCreateOrConnectWithoutUserInput = {
    where: AIDocumentWhereUniqueInput
    create: XOR<AIDocumentCreateWithoutUserInput, AIDocumentUncheckedCreateWithoutUserInput>
  }

  export type AIDocumentCreateManyUserInputEnvelope = {
    data: AIDocumentCreateManyUserInput | AIDocumentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionAnswerCreateWithoutUserInput = {
    answer: string
    createdAt?: Date | string
    category: QuestionCategoryCreateNestedOneWithoutAnswersInput
  }

  export type QuestionAnswerUncheckedCreateWithoutUserInput = {
    id?: number
    answer: string
    categoryId: number
    createdAt?: Date | string
  }

  export type QuestionAnswerCreateOrConnectWithoutUserInput = {
    where: QuestionAnswerWhereUniqueInput
    create: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type QuestionAnswerCreateManyUserInputEnvelope = {
    data: QuestionAnswerCreateManyUserInput | QuestionAnswerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AIDocumentUpsertWithWhereUniqueWithoutUserInput = {
    where: AIDocumentWhereUniqueInput
    update: XOR<AIDocumentUpdateWithoutUserInput, AIDocumentUncheckedUpdateWithoutUserInput>
    create: XOR<AIDocumentCreateWithoutUserInput, AIDocumentUncheckedCreateWithoutUserInput>
  }

  export type AIDocumentUpdateWithWhereUniqueWithoutUserInput = {
    where: AIDocumentWhereUniqueInput
    data: XOR<AIDocumentUpdateWithoutUserInput, AIDocumentUncheckedUpdateWithoutUserInput>
  }

  export type AIDocumentUpdateManyWithWhereWithoutUserInput = {
    where: AIDocumentScalarWhereInput
    data: XOR<AIDocumentUpdateManyMutationInput, AIDocumentUncheckedUpdateManyWithoutUserInput>
  }

  export type AIDocumentScalarWhereInput = {
    AND?: AIDocumentScalarWhereInput | AIDocumentScalarWhereInput[]
    OR?: AIDocumentScalarWhereInput[]
    NOT?: AIDocumentScalarWhereInput | AIDocumentScalarWhereInput[]
    id?: IntFilter<"AIDocument"> | number
    title?: StringFilter<"AIDocument"> | string
    content?: StringFilter<"AIDocument"> | string
    framework?: StringFilter<"AIDocument"> | string
    industry?: StringNullableFilter<"AIDocument"> | string | null
    documentType?: StringFilter<"AIDocument"> | string
    qualityScore?: IntNullableFilter<"AIDocument"> | number | null
    wordCount?: IntNullableFilter<"AIDocument"> | number | null
    userId?: IntFilter<"AIDocument"> | number
    createdAt?: DateTimeFilter<"AIDocument"> | Date | string
    updatedAt?: DateTimeFilter<"AIDocument"> | Date | string
  }

  export type QuestionAnswerUpsertWithWhereUniqueWithoutUserInput = {
    where: QuestionAnswerWhereUniqueInput
    update: XOR<QuestionAnswerUpdateWithoutUserInput, QuestionAnswerUncheckedUpdateWithoutUserInput>
    create: XOR<QuestionAnswerCreateWithoutUserInput, QuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type QuestionAnswerUpdateWithWhereUniqueWithoutUserInput = {
    where: QuestionAnswerWhereUniqueInput
    data: XOR<QuestionAnswerUpdateWithoutUserInput, QuestionAnswerUncheckedUpdateWithoutUserInput>
  }

  export type QuestionAnswerUpdateManyWithWhereWithoutUserInput = {
    where: QuestionAnswerScalarWhereInput
    data: XOR<QuestionAnswerUpdateManyMutationInput, QuestionAnswerUncheckedUpdateManyWithoutUserInput>
  }

  export type QuestionAnswerScalarWhereInput = {
    AND?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
    OR?: QuestionAnswerScalarWhereInput[]
    NOT?: QuestionAnswerScalarWhereInput | QuestionAnswerScalarWhereInput[]
    id?: IntFilter<"QuestionAnswer"> | number
    answer?: StringFilter<"QuestionAnswer"> | string
    userId?: IntFilter<"QuestionAnswer"> | number
    categoryId?: IntFilter<"QuestionAnswer"> | number
    createdAt?: DateTimeFilter<"QuestionAnswer"> | Date | string
  }

  export type UserCreateWithoutDocumentsInput = {
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: QuestionAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: number
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: QuestionAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentDataCreateWithoutDocumentInput = {
    listId?: number | null
    content: string
    createdAt?: Date | string
  }

  export type DocumentDataUncheckedCreateWithoutDocumentInput = {
    id?: number
    listId?: number | null
    content: string
    createdAt?: Date | string
  }

  export type DocumentDataCreateOrConnectWithoutDocumentInput = {
    where: DocumentDataWhereUniqueInput
    create: XOR<DocumentDataCreateWithoutDocumentInput, DocumentDataUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentDataCreateManyDocumentInputEnvelope = {
    data: DocumentDataCreateManyDocumentInput | DocumentDataCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type AIDocumentChatCreateWithoutDocumentInput = {
    message: string
    role: string
    createdAt?: Date | string
  }

  export type AIDocumentChatUncheckedCreateWithoutDocumentInput = {
    id?: number
    message: string
    role: string
    createdAt?: Date | string
  }

  export type AIDocumentChatCreateOrConnectWithoutDocumentInput = {
    where: AIDocumentChatWhereUniqueInput
    create: XOR<AIDocumentChatCreateWithoutDocumentInput, AIDocumentChatUncheckedCreateWithoutDocumentInput>
  }

  export type AIDocumentChatCreateManyDocumentInputEnvelope = {
    data: AIDocumentChatCreateManyDocumentInput | AIDocumentChatCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: QuestionAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: QuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentDataUpsertWithWhereUniqueWithoutDocumentInput = {
    where: DocumentDataWhereUniqueInput
    update: XOR<DocumentDataUpdateWithoutDocumentInput, DocumentDataUncheckedUpdateWithoutDocumentInput>
    create: XOR<DocumentDataCreateWithoutDocumentInput, DocumentDataUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentDataUpdateWithWhereUniqueWithoutDocumentInput = {
    where: DocumentDataWhereUniqueInput
    data: XOR<DocumentDataUpdateWithoutDocumentInput, DocumentDataUncheckedUpdateWithoutDocumentInput>
  }

  export type DocumentDataUpdateManyWithWhereWithoutDocumentInput = {
    where: DocumentDataScalarWhereInput
    data: XOR<DocumentDataUpdateManyMutationInput, DocumentDataUncheckedUpdateManyWithoutDocumentInput>
  }

  export type DocumentDataScalarWhereInput = {
    AND?: DocumentDataScalarWhereInput | DocumentDataScalarWhereInput[]
    OR?: DocumentDataScalarWhereInput[]
    NOT?: DocumentDataScalarWhereInput | DocumentDataScalarWhereInput[]
    id?: IntFilter<"DocumentData"> | number
    documentId?: IntFilter<"DocumentData"> | number
    listId?: IntNullableFilter<"DocumentData"> | number | null
    content?: StringFilter<"DocumentData"> | string
    createdAt?: DateTimeFilter<"DocumentData"> | Date | string
  }

  export type AIDocumentChatUpsertWithWhereUniqueWithoutDocumentInput = {
    where: AIDocumentChatWhereUniqueInput
    update: XOR<AIDocumentChatUpdateWithoutDocumentInput, AIDocumentChatUncheckedUpdateWithoutDocumentInput>
    create: XOR<AIDocumentChatCreateWithoutDocumentInput, AIDocumentChatUncheckedCreateWithoutDocumentInput>
  }

  export type AIDocumentChatUpdateWithWhereUniqueWithoutDocumentInput = {
    where: AIDocumentChatWhereUniqueInput
    data: XOR<AIDocumentChatUpdateWithoutDocumentInput, AIDocumentChatUncheckedUpdateWithoutDocumentInput>
  }

  export type AIDocumentChatUpdateManyWithWhereWithoutDocumentInput = {
    where: AIDocumentChatScalarWhereInput
    data: XOR<AIDocumentChatUpdateManyMutationInput, AIDocumentChatUncheckedUpdateManyWithoutDocumentInput>
  }

  export type AIDocumentChatScalarWhereInput = {
    AND?: AIDocumentChatScalarWhereInput | AIDocumentChatScalarWhereInput[]
    OR?: AIDocumentChatScalarWhereInput[]
    NOT?: AIDocumentChatScalarWhereInput | AIDocumentChatScalarWhereInput[]
    id?: IntFilter<"AIDocumentChat"> | number
    documentId?: IntFilter<"AIDocumentChat"> | number
    message?: StringFilter<"AIDocumentChat"> | string
    role?: StringFilter<"AIDocumentChat"> | string
    createdAt?: DateTimeFilter<"AIDocumentChat"> | Date | string
  }

  export type AIDocumentCreateWithoutDocumentDataInput = {
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
    documentChat?: AIDocumentChatCreateNestedManyWithoutDocumentInput
  }

  export type AIDocumentUncheckedCreateWithoutDocumentDataInput = {
    id?: number
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    documentChat?: AIDocumentChatUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type AIDocumentCreateOrConnectWithoutDocumentDataInput = {
    where: AIDocumentWhereUniqueInput
    create: XOR<AIDocumentCreateWithoutDocumentDataInput, AIDocumentUncheckedCreateWithoutDocumentDataInput>
  }

  export type AIDocumentUpsertWithoutDocumentDataInput = {
    update: XOR<AIDocumentUpdateWithoutDocumentDataInput, AIDocumentUncheckedUpdateWithoutDocumentDataInput>
    create: XOR<AIDocumentCreateWithoutDocumentDataInput, AIDocumentUncheckedCreateWithoutDocumentDataInput>
    where?: AIDocumentWhereInput
  }

  export type AIDocumentUpdateToOneWithWhereWithoutDocumentDataInput = {
    where?: AIDocumentWhereInput
    data: XOR<AIDocumentUpdateWithoutDocumentDataInput, AIDocumentUncheckedUpdateWithoutDocumentDataInput>
  }

  export type AIDocumentUpdateWithoutDocumentDataInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
    documentChat?: AIDocumentChatUpdateManyWithoutDocumentNestedInput
  }

  export type AIDocumentUncheckedUpdateWithoutDocumentDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentChat?: AIDocumentChatUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type AIDocumentCreateWithoutDocumentChatInput = {
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
    documentData?: DocumentDataCreateNestedManyWithoutDocumentInput
  }

  export type AIDocumentUncheckedCreateWithoutDocumentChatInput = {
    id?: number
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    documentData?: DocumentDataUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type AIDocumentCreateOrConnectWithoutDocumentChatInput = {
    where: AIDocumentWhereUniqueInput
    create: XOR<AIDocumentCreateWithoutDocumentChatInput, AIDocumentUncheckedCreateWithoutDocumentChatInput>
  }

  export type AIDocumentUpsertWithoutDocumentChatInput = {
    update: XOR<AIDocumentUpdateWithoutDocumentChatInput, AIDocumentUncheckedUpdateWithoutDocumentChatInput>
    create: XOR<AIDocumentCreateWithoutDocumentChatInput, AIDocumentUncheckedCreateWithoutDocumentChatInput>
    where?: AIDocumentWhereInput
  }

  export type AIDocumentUpdateToOneWithWhereWithoutDocumentChatInput = {
    where?: AIDocumentWhereInput
    data: XOR<AIDocumentUpdateWithoutDocumentChatInput, AIDocumentUncheckedUpdateWithoutDocumentChatInput>
  }

  export type AIDocumentUpdateWithoutDocumentChatInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
    documentData?: DocumentDataUpdateManyWithoutDocumentNestedInput
  }

  export type AIDocumentUncheckedUpdateWithoutDocumentChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentData?: DocumentDataUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type QuestionAnswerCreateWithoutCategoryInput = {
    answer: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAnswersInput
  }

  export type QuestionAnswerUncheckedCreateWithoutCategoryInput = {
    id?: number
    answer: string
    userId: number
    createdAt?: Date | string
  }

  export type QuestionAnswerCreateOrConnectWithoutCategoryInput = {
    where: QuestionAnswerWhereUniqueInput
    create: XOR<QuestionAnswerCreateWithoutCategoryInput, QuestionAnswerUncheckedCreateWithoutCategoryInput>
  }

  export type QuestionAnswerCreateManyCategoryInputEnvelope = {
    data: QuestionAnswerCreateManyCategoryInput | QuestionAnswerCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type QuestionAnswerUpsertWithWhereUniqueWithoutCategoryInput = {
    where: QuestionAnswerWhereUniqueInput
    update: XOR<QuestionAnswerUpdateWithoutCategoryInput, QuestionAnswerUncheckedUpdateWithoutCategoryInput>
    create: XOR<QuestionAnswerCreateWithoutCategoryInput, QuestionAnswerUncheckedCreateWithoutCategoryInput>
  }

  export type QuestionAnswerUpdateWithWhereUniqueWithoutCategoryInput = {
    where: QuestionAnswerWhereUniqueInput
    data: XOR<QuestionAnswerUpdateWithoutCategoryInput, QuestionAnswerUncheckedUpdateWithoutCategoryInput>
  }

  export type QuestionAnswerUpdateManyWithWhereWithoutCategoryInput = {
    where: QuestionAnswerScalarWhereInput
    data: XOR<QuestionAnswerUpdateManyMutationInput, QuestionAnswerUncheckedUpdateManyWithoutCategoryInput>
  }

  export type UserCreateWithoutAnswersInput = {
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: AIDocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnswersInput = {
    id?: number
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: AIDocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnswersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnswersInput, UserUncheckedCreateWithoutAnswersInput>
  }

  export type QuestionCategoryCreateWithoutAnswersInput = {
    categorytype: string
    createdAt?: Date | string
  }

  export type QuestionCategoryUncheckedCreateWithoutAnswersInput = {
    id?: number
    categorytype: string
    createdAt?: Date | string
  }

  export type QuestionCategoryCreateOrConnectWithoutAnswersInput = {
    where: QuestionCategoryWhereUniqueInput
    create: XOR<QuestionCategoryCreateWithoutAnswersInput, QuestionCategoryUncheckedCreateWithoutAnswersInput>
  }

  export type UserUpsertWithoutAnswersInput = {
    update: XOR<UserUpdateWithoutAnswersInput, UserUncheckedUpdateWithoutAnswersInput>
    create: XOR<UserCreateWithoutAnswersInput, UserUncheckedCreateWithoutAnswersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnswersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnswersInput, UserUncheckedUpdateWithoutAnswersInput>
  }

  export type UserUpdateWithoutAnswersInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: AIDocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: AIDocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionCategoryUpsertWithoutAnswersInput = {
    update: XOR<QuestionCategoryUpdateWithoutAnswersInput, QuestionCategoryUncheckedUpdateWithoutAnswersInput>
    create: XOR<QuestionCategoryCreateWithoutAnswersInput, QuestionCategoryUncheckedCreateWithoutAnswersInput>
    where?: QuestionCategoryWhereInput
  }

  export type QuestionCategoryUpdateToOneWithWhereWithoutAnswersInput = {
    where?: QuestionCategoryWhereInput
    data: XOR<QuestionCategoryUpdateWithoutAnswersInput, QuestionCategoryUncheckedUpdateWithoutAnswersInput>
  }

  export type QuestionCategoryUpdateWithoutAnswersInput = {
    categorytype?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCategoryUncheckedUpdateWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    categorytype?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentCreateManyUserInput = {
    id?: number
    title: string
    content: string
    framework: string
    industry?: string | null
    documentType: string
    qualityScore?: number | null
    wordCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionAnswerCreateManyUserInput = {
    id?: number
    answer: string
    categoryId: number
    createdAt?: Date | string
  }

  export type AIDocumentUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentData?: DocumentDataUpdateManyWithoutDocumentNestedInput
    documentChat?: AIDocumentChatUpdateManyWithoutDocumentNestedInput
  }

  export type AIDocumentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentData?: DocumentDataUncheckedUpdateManyWithoutDocumentNestedInput
    documentChat?: AIDocumentChatUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type AIDocumentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    framework?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: StringFieldUpdateOperationsInput | string
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    wordCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAnswerUpdateWithoutUserInput = {
    answer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: QuestionCategoryUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type QuestionAnswerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentDataCreateManyDocumentInput = {
    id?: number
    listId?: number | null
    content: string
    createdAt?: Date | string
  }

  export type AIDocumentChatCreateManyDocumentInput = {
    id?: number
    message: string
    role: string
    createdAt?: Date | string
  }

  export type DocumentDataUpdateWithoutDocumentInput = {
    listId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentDataUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    listId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentDataUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    listId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentChatUpdateWithoutDocumentInput = {
    message?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentChatUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIDocumentChatUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAnswerCreateManyCategoryInput = {
    id?: number
    answer: string
    userId: number
    createdAt?: Date | string
  }

  export type QuestionAnswerUpdateWithoutCategoryInput = {
    answer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type QuestionAnswerUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAnswerUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AIDocumentCountOutputTypeDefaultArgs instead
     */
    export type AIDocumentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AIDocumentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionCategoryCountOutputTypeDefaultArgs instead
     */
    export type QuestionCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AIDocumentDefaultArgs instead
     */
    export type AIDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AIDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDataDefaultArgs instead
     */
    export type DocumentDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AIDocumentChatDefaultArgs instead
     */
    export type AIDocumentChatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AIDocumentChatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionCategoryDefaultArgs instead
     */
    export type QuestionCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionAnswerDefaultArgs instead
     */
    export type QuestionAnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionAnswerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PromptDefaultArgs instead
     */
    export type PromptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PromptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PromptLogsDefaultArgs instead
     */
    export type PromptLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PromptLogsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AIModelAssistantDefaultArgs instead
     */
    export type AIModelAssistantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AIModelAssistantDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}