generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documents AIDocument[]
  answers   QuestionAnswer[]

  @@map("users")
}

model AIDocument {
  id           Int      @id @default(autoincrement())
  title        String
  content      String
  framework    String
  industry     String?
  documentType String
  qualityScore Int?
  wordCount    Int?
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User             @relation(fields: [userId], references: [id])
  documentData DocumentData[]
  documentChat AIDocumentChat[]

  @@map("ai_documents")
}

model DocumentData {
  id         Int      @id @default(autoincrement())
  documentId Int
  listId     Int?
  content    String
  createdAt  DateTime @default(now())

  document AIDocument @relation(fields: [documentId], references: [id])

  @@map("document_data")
}

model AIDocumentChat {
  id         Int      @id @default(autoincrement())
  documentId Int
  message    String
  role       String
  createdAt  DateTime @default(now())

  document AIDocument @relation(fields: [documentId], references: [id])

  @@map("ai_document_chats")
}

model QuestionCategory {
  id           Int      @id @default(autoincrement())
  categorytype String   @unique
  createdAt    DateTime @default(now())

  answers QuestionAnswer[]

  @@map("question_categories")
}

model QuestionAnswer {
  id         Int      @id @default(autoincrement())
  answer     String
  userId     Int
  categoryId Int
  createdAt  DateTime @default(now())

  user     User             @relation(fields: [userId], references: [id])
  category QuestionCategory @relation(fields: [categoryId], references: [id])

  @@map("question_answers")
}

model Prompt {
  id      Int     @id @default(autoincrement())
  prompt1 String
  prompt2 String?
  prompt3 String?

  @@map("prompts")
}

model PromptLogs {
  id      Int     @id @default(autoincrement())
  prompt1 String
  prompt2 String?
  prompt3 String?
  status  Boolean @default(false)

  @@map("prompt_logs")
}

model AIModelAssistant {
  id         Int      @id @default(autoincrement())
  assitantId String   @unique
  threadId   String?
  createdAt  DateTime @default(now())

  @@map("ai_model_assistants")
}
